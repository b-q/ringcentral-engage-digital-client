/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.JSON;


/**
 * Restriction
 */
@JsonPropertyOrder({
  Restriction.JSON_PROPERTY_ONLY
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-28T22:45:26.654875700+02:00[Europe/Paris]")
public class Restriction implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ONLY = "only";
  private List<String> only = null;

  public Restriction() { 
  }

  public Restriction only(List<String> only) {
    this.only = only;
    return this;
  }

  public Restriction addOnlyItem(String onlyItem) {
    if (this.only == null) {
      this.only = new ArrayList<>();
    }
    this.only.add(onlyItem);
    return this;
  }

   /**
   * Get only
   * @return only
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getOnly() {
    return only;
  }


  @JsonProperty(JSON_PROPERTY_ONLY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setOnly(List<String> only) {
    this.only = only;
  }


  /**
   * Return true if this Restriction object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Restriction restriction = (Restriction) o;
    return Objects.equals(this.only, restriction.only);
  }

  @Override
  public int hashCode() {
    return Objects.hash(only);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Restriction {\n");
    sb.append("    only: ").append(toIndentedString(only)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

