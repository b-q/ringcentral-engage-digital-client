/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.JSON;


/**
 * Thread
 */
@JsonPropertyOrder({
  Thread.JSON_PROPERTY_CATEGORY_IDS,
  Thread.JSON_PROPERTY_CLOSED,
  Thread.JSON_PROPERTY_CONTENTS_COUNT,
  Thread.JSON_PROPERTY_CREATED_AT,
  Thread.JSON_PROPERTY_EXTRA_DATA,
  Thread.JSON_PROPERTY_FOREIGN_ID,
  Thread.JSON_PROPERTY_ID,
  Thread.JSON_PROPERTY_INTERVENTIONS_COUNT,
  Thread.JSON_PROPERTY_SOURCE_ID,
  Thread.JSON_PROPERTY_THREAD_CATEGORY_IDS,
  Thread.JSON_PROPERTY_TITLE,
  Thread.JSON_PROPERTY_UPDATED_AT
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-28T22:45:26.654875700+02:00[Europe/Paris]")
public class Thread implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_CATEGORY_IDS = "category_ids";
  private List<String> categoryIds = null;

  public static final String JSON_PROPERTY_CLOSED = "closed";
  private Boolean closed;

  public static final String JSON_PROPERTY_CONTENTS_COUNT = "contents_count";
  private Integer contentsCount;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_EXTRA_DATA = "extra_data";
  private Object extraData;

  public static final String JSON_PROPERTY_FOREIGN_ID = "foreign_id";
  private String foreignId;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_INTERVENTIONS_COUNT = "interventions_count";
  private Integer interventionsCount;

  public static final String JSON_PROPERTY_SOURCE_ID = "source_id";
  private String sourceId;

  public static final String JSON_PROPERTY_THREAD_CATEGORY_IDS = "thread_category_ids";
  private List<String> threadCategoryIds = null;

  public static final String JSON_PROPERTY_TITLE = "title";
  private String title;

  public static final String JSON_PROPERTY_UPDATED_AT = "updated_at";
  private OffsetDateTime updatedAt;

  public Thread() { 
  }

  public Thread categoryIds(List<String> categoryIds) {
    this.categoryIds = categoryIds;
    return this;
  }

  public Thread addCategoryIdsItem(String categoryIdsItem) {
    if (this.categoryIds == null) {
      this.categoryIds = new ArrayList<>();
    }
    this.categoryIds.add(categoryIdsItem);
    return this;
  }

   /**
   * Get categoryIds
   * @return categoryIds
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CATEGORY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCategoryIds() {
    return categoryIds;
  }


  @JsonProperty(JSON_PROPERTY_CATEGORY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCategoryIds(List<String> categoryIds) {
    this.categoryIds = categoryIds;
  }


  public Thread closed(Boolean closed) {
    this.closed = closed;
    return this;
  }

   /**
   * Get closed
   * @return closed
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CLOSED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getClosed() {
    return closed;
  }


  @JsonProperty(JSON_PROPERTY_CLOSED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setClosed(Boolean closed) {
    this.closed = closed;
  }


  public Thread contentsCount(Integer contentsCount) {
    this.contentsCount = contentsCount;
    return this;
  }

   /**
   * Get contentsCount
   * @return contentsCount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getContentsCount() {
    return contentsCount;
  }


  @JsonProperty(JSON_PROPERTY_CONTENTS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentsCount(Integer contentsCount) {
    this.contentsCount = contentsCount;
  }


  public Thread createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Thread extraData(Object extraData) {
    this.extraData = extraData;
    return this;
  }

   /**
   * Get extraData
   * @return extraData
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Object getExtraData() {
    return extraData;
  }


  @JsonProperty(JSON_PROPERTY_EXTRA_DATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExtraData(Object extraData) {
    this.extraData = extraData;
  }


  public Thread foreignId(String foreignId) {
    this.foreignId = foreignId;
    return this;
  }

   /**
   * Get foreignId
   * @return foreignId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FOREIGN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getForeignId() {
    return foreignId;
  }


  @JsonProperty(JSON_PROPERTY_FOREIGN_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setForeignId(String foreignId) {
    this.foreignId = foreignId;
  }


  public Thread id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public Thread interventionsCount(Integer interventionsCount) {
    this.interventionsCount = interventionsCount;
    return this;
  }

   /**
   * Get interventionsCount
   * @return interventionsCount
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERVENTIONS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInterventionsCount() {
    return interventionsCount;
  }


  @JsonProperty(JSON_PROPERTY_INTERVENTIONS_COUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterventionsCount(Integer interventionsCount) {
    this.interventionsCount = interventionsCount;
  }


  public Thread sourceId(String sourceId) {
    this.sourceId = sourceId;
    return this;
  }

   /**
   * Get sourceId
   * @return sourceId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSourceId() {
    return sourceId;
  }


  @JsonProperty(JSON_PROPERTY_SOURCE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSourceId(String sourceId) {
    this.sourceId = sourceId;
  }


  public Thread threadCategoryIds(List<String> threadCategoryIds) {
    this.threadCategoryIds = threadCategoryIds;
    return this;
  }

  public Thread addThreadCategoryIdsItem(String threadCategoryIdsItem) {
    if (this.threadCategoryIds == null) {
      this.threadCategoryIds = new ArrayList<>();
    }
    this.threadCategoryIds.add(threadCategoryIdsItem);
    return this;
  }

   /**
   * Get threadCategoryIds
   * @return threadCategoryIds
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREAD_CATEGORY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getThreadCategoryIds() {
    return threadCategoryIds;
  }


  @JsonProperty(JSON_PROPERTY_THREAD_CATEGORY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadCategoryIds(List<String> threadCategoryIds) {
    this.threadCategoryIds = threadCategoryIds;
  }


  public Thread title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTitle() {
    return title;
  }


  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTitle(String title) {
    this.title = title;
  }


  public Thread updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  /**
   * Return true if this Thread object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Thread thread = (Thread) o;
    return Objects.equals(this.categoryIds, thread.categoryIds) &&
        Objects.equals(this.closed, thread.closed) &&
        Objects.equals(this.contentsCount, thread.contentsCount) &&
        Objects.equals(this.createdAt, thread.createdAt) &&
        Objects.equals(this.extraData, thread.extraData) &&
        Objects.equals(this.foreignId, thread.foreignId) &&
        Objects.equals(this.id, thread.id) &&
        Objects.equals(this.interventionsCount, thread.interventionsCount) &&
        Objects.equals(this.sourceId, thread.sourceId) &&
        Objects.equals(this.threadCategoryIds, thread.threadCategoryIds) &&
        Objects.equals(this.title, thread.title) &&
        Objects.equals(this.updatedAt, thread.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(categoryIds, closed, contentsCount, createdAt, extraData, foreignId, id, interventionsCount, sourceId, threadCategoryIds, title, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Thread {\n");
    sb.append("    categoryIds: ").append(toIndentedString(categoryIds)).append("\n");
    sb.append("    closed: ").append(toIndentedString(closed)).append("\n");
    sb.append("    contentsCount: ").append(toIndentedString(contentsCount)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    extraData: ").append(toIndentedString(extraData)).append("\n");
    sb.append("    foreignId: ").append(toIndentedString(foreignId)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interventionsCount: ").append(toIndentedString(interventionsCount)).append("\n");
    sb.append("    sourceId: ").append(toIndentedString(sourceId)).append("\n");
    sb.append("    threadCategoryIds: ").append(toIndentedString(threadCategoryIds)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

