/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.SourceAutoResponseTriggerEnabled;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.SourceAutoResponseTriggerGracePeriods;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.SourceAutoResponseTriggersInner;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.SourceSignaturesInner;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.SourceTemplateMessagesInner;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.JSON;


/**
 * Source
 */
@JsonPropertyOrder({
  Source.JSON_PROPERTY_ACTIVE,
  Source.JSON_PROPERTY_AUTO_DETECT_CONTENT_LANGUAGE,
  Source.JSON_PROPERTY_CHANNEL_ID,
  Source.JSON_PROPERTY_COLOR,
  Source.JSON_PROPERTY_COMMUNITY_ID,
  Source.JSON_PROPERTY_CONTENT_ARCHIVING,
  Source.JSON_PROPERTY_CONTENT_ARCHIVING_PERIOD,
  Source.JSON_PROPERTY_CONTENT_LANGUAGES,
  Source.JSON_PROPERTY_CREATED_AT,
  Source.JSON_PROPERTY_DEFAULT_CATEGORY_IDS,
  Source.JSON_PROPERTY_DEFAULT_CONTENT_LANGUAGE,
  Source.JSON_PROPERTY_ENABLE_ANDROID,
  Source.JSON_PROPERTY_ENABLE_IOS,
  Source.JSON_PROPERTY_ENABLE_WEB,
  Source.JSON_PROPERTY_AUTO_RESPONSE_TRIGGERS,
  Source.JSON_PROPERTY_AUTO_RESPONSE_TRIGGER_ENABLED,
  Source.JSON_PROPERTY_AUTO_RESPONSE_TRIGGER_GRACE_PERIODS,
  Source.JSON_PROPERTY_SIGNATURES,
  Source.JSON_PROPERTY_FROM_NAME,
  Source.JSON_PROPERTY_ERROR_MESSAGE,
  Source.JSON_PROPERTY_TEMPLATE_MESSAGE_NAMESPACE,
  Source.JSON_PROPERTY_HIDDEN_FROM_STATS,
  Source.JSON_PROPERTY_ID,
  Source.JSON_PROPERTY_INTERVENTION_MESSAGES_BOOST,
  Source.JSON_PROPERTY_LIVE_CHAT,
  Source.JSON_PROPERTY_NAME,
  Source.JSON_PROPERTY_SLA_EXPIRED_STRATEGY,
  Source.JSON_PROPERTY_SLA_RESPONSE,
  Source.JSON_PROPERTY_SLA_THRESHOLD,
  Source.JSON_PROPERTY_SLA_FILTERING_CATEGORIES_STRATEGY,
  Source.JSON_PROPERTY_SLA_FILTERING_CATEGORY_IDS,
  Source.JSON_PROPERTY_DEFAULT_TASK_PRIORITY,
  Source.JSON_PROPERTY_STATUS,
  Source.JSON_PROPERTY_TEMPLATE_MESSAGES,
  Source.JSON_PROPERTY_TIME_SHEET_IDS,
  Source.JSON_PROPERTY_TRANSFERRED_TASKS_BOOST,
  Source.JSON_PROPERTY_ATTACHMENTS_SECURITY_LEVEL,
  Source.JSON_PROPERTY_TYPE,
  Source.JSON_PROPERTY_UPDATED_AT,
  Source.JSON_PROPERTY_USER_THREAD_DEFAULT_CATEGORY_IDS,
  Source.JSON_PROPERTY_TIME_FOR_THREAD_INCLUSION,
  Source.JSON_PROPERTY_TIME_FOR_THREAD_INCLUSION_ENABLED,
  Source.JSON_PROPERTY_EMAIL_PARSER,
  Source.JSON_PROPERTY_IMAP_SMTP_EMAIL,
  Source.JSON_PROPERTY_IMAP_MAILBOXES_TO_IMPORT,
  Source.JSON_PROPERTY_IMAP_MAILBOX_USED_FOR_SENT_MAIL,
  Source.JSON_PROPERTY_IMAP_ADDRESS,
  Source.JSON_PROPERTY_IMAP_PORT,
  Source.JSON_PROPERTY_IMAP_USERNAME,
  Source.JSON_PROPERTY_IMAP_USE_SSL_TLS,
  Source.JSON_PROPERTY_IMAP_USE_START_TLS,
  Source.JSON_PROPERTY_IMAP_AUTHENTICATION_TYPE,
  Source.JSON_PROPERTY_IMAP_SSL_VERIFY_MODE,
  Source.JSON_PROPERTY_SMTP_ADDRESS,
  Source.JSON_PROPERTY_SMTP_PORT,
  Source.JSON_PROPERTY_SMTP_USERNAME,
  Source.JSON_PROPERTY_SMTP_USE_SSL_TLS,
  Source.JSON_PROPERTY_SMTP_USE_START_TLS,
  Source.JSON_PROPERTY_SMTP_AUTHENTICATION_TYPE,
  Source.JSON_PROPERTY_SMTP_SSL_VERIFY_MODE,
  Source.JSON_PROPERTY_SMTP_HELO_DOMAIN,
  Source.JSON_PROPERTY_THREADING_HEURISTICS,
  Source.JSON_PROPERTY_SPAM_ASSASSIN_LEVEL,
  Source.JSON_PROPERTY_WHITELISTED_EMAILS,
  Source.JSON_PROPERTY_CC_BLACKLIST,
  Source.JSON_PROPERTY_POSTMARK_ENABLED
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-28T22:45:26.654875700+02:00[Europe/Paris]")
public class Source implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_AUTO_DETECT_CONTENT_LANGUAGE = "auto_detect_content_language";
  private Boolean autoDetectContentLanguage;

  public static final String JSON_PROPERTY_CHANNEL_ID = "channel_id";
  private String channelId;

  public static final String JSON_PROPERTY_COLOR = "color";
  private Integer color;

  public static final String JSON_PROPERTY_COMMUNITY_ID = "community_id";
  private String communityId;

  public static final String JSON_PROPERTY_CONTENT_ARCHIVING = "content_archiving";
  private Boolean contentArchiving;

  public static final String JSON_PROPERTY_CONTENT_ARCHIVING_PERIOD = "content_archiving_period";
  private Long contentArchivingPeriod;

  public static final String JSON_PROPERTY_CONTENT_LANGUAGES = "content_languages";
  private List<String> contentLanguages = null;

  public static final String JSON_PROPERTY_CREATED_AT = "created_at";
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_DEFAULT_CATEGORY_IDS = "default_category_ids";
  private List<String> defaultCategoryIds = null;

  public static final String JSON_PROPERTY_DEFAULT_CONTENT_LANGUAGE = "default_content_language";
  private String defaultContentLanguage;

  public static final String JSON_PROPERTY_ENABLE_ANDROID = "enable_android";
  private Boolean enableAndroid;

  public static final String JSON_PROPERTY_ENABLE_IOS = "enable_ios";
  private Boolean enableIos;

  public static final String JSON_PROPERTY_ENABLE_WEB = "enable_web";
  private Boolean enableWeb;

  public static final String JSON_PROPERTY_AUTO_RESPONSE_TRIGGERS = "auto_response_triggers";
  private List<SourceAutoResponseTriggersInner> autoResponseTriggers = null;

  public static final String JSON_PROPERTY_AUTO_RESPONSE_TRIGGER_ENABLED = "auto_response_trigger_enabled";
  private SourceAutoResponseTriggerEnabled autoResponseTriggerEnabled;

  public static final String JSON_PROPERTY_AUTO_RESPONSE_TRIGGER_GRACE_PERIODS = "auto_response_trigger_grace_periods";
  private SourceAutoResponseTriggerGracePeriods autoResponseTriggerGracePeriods;

  public static final String JSON_PROPERTY_SIGNATURES = "signatures";
  private List<SourceSignaturesInner> signatures = null;

  public static final String JSON_PROPERTY_FROM_NAME = "from_name";
  private String fromName;

  public static final String JSON_PROPERTY_ERROR_MESSAGE = "error_message";
  private String errorMessage;

  public static final String JSON_PROPERTY_TEMPLATE_MESSAGE_NAMESPACE = "template_message_namespace";
  private String templateMessageNamespace;

  public static final String JSON_PROPERTY_HIDDEN_FROM_STATS = "hidden_from_stats";
  private Boolean hiddenFromStats;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_INTERVENTION_MESSAGES_BOOST = "intervention_messages_boost";
  private Integer interventionMessagesBoost;

  public static final String JSON_PROPERTY_LIVE_CHAT = "live_chat";
  private Boolean liveChat;

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  /**
   * SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;)
   */
  public enum SlaExpiredStrategyEnum {
    MAX("max"),
    
    HALF("half"),
    
    BASE("base");

    private String value;

    SlaExpiredStrategyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static SlaExpiredStrategyEnum fromValue(String value) {
      for (SlaExpiredStrategyEnum b : SlaExpiredStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_SLA_EXPIRED_STRATEGY = "sla_expired_strategy";
  private SlaExpiredStrategyEnum slaExpiredStrategy;

  public static final String JSON_PROPERTY_SLA_RESPONSE = "sla_response";
  private Integer slaResponse;

  public static final String JSON_PROPERTY_SLA_THRESHOLD = "sla_threshold";
  private Integer slaThreshold;

  public static final String JSON_PROPERTY_SLA_FILTERING_CATEGORIES_STRATEGY = "sla_filtering_categories_strategy";
  private String slaFilteringCategoriesStrategy;

  public static final String JSON_PROPERTY_SLA_FILTERING_CATEGORY_IDS = "sla_filtering_category_ids";
  private List<String> slaFilteringCategoryIds = null;

  public static final String JSON_PROPERTY_DEFAULT_TASK_PRIORITY = "default_task_priority";
  private Integer defaultTaskPriority;

  public static final String JSON_PROPERTY_STATUS = "status";
  private String status;

  public static final String JSON_PROPERTY_TEMPLATE_MESSAGES = "template_messages";
  private List<SourceTemplateMessagesInner> templateMessages = null;

  public static final String JSON_PROPERTY_TIME_SHEET_IDS = "time_sheet_ids";
  private List<String> timeSheetIds = null;

  public static final String JSON_PROPERTY_TRANSFERRED_TASKS_BOOST = "transferred_tasks_boost";
  private Integer transferredTasksBoost;

  public static final String JSON_PROPERTY_ATTACHMENTS_SECURITY_LEVEL = "attachments_security_level";
  private String attachmentsSecurityLevel;

  public static final String JSON_PROPERTY_TYPE = "type";
  private String type;

  public static final String JSON_PROPERTY_UPDATED_AT = "updated_at";
  private OffsetDateTime updatedAt;

  public static final String JSON_PROPERTY_USER_THREAD_DEFAULT_CATEGORY_IDS = "user_thread_default_category_ids";
  private List<String> userThreadDefaultCategoryIds = null;

  public static final String JSON_PROPERTY_TIME_FOR_THREAD_INCLUSION = "time_for_thread_inclusion";
  private Integer timeForThreadInclusion;

  public static final String JSON_PROPERTY_TIME_FOR_THREAD_INCLUSION_ENABLED = "time_for_thread_inclusion_enabled";
  private Boolean timeForThreadInclusionEnabled;

  public static final String JSON_PROPERTY_EMAIL_PARSER = "email_parser";
  private Boolean emailParser;

  public static final String JSON_PROPERTY_IMAP_SMTP_EMAIL = "imap_smtp_email";
  private String imapSmtpEmail;

  public static final String JSON_PROPERTY_IMAP_MAILBOXES_TO_IMPORT = "imap_mailboxes_to_import";
  private List<String> imapMailboxesToImport = null;

  public static final String JSON_PROPERTY_IMAP_MAILBOX_USED_FOR_SENT_MAIL = "imap_mailbox_used_for_sent_mail";
  private String imapMailboxUsedForSentMail;

  public static final String JSON_PROPERTY_IMAP_ADDRESS = "imap_address";
  private String imapAddress;

  public static final String JSON_PROPERTY_IMAP_PORT = "imap_port";
  private Integer imapPort;

  public static final String JSON_PROPERTY_IMAP_USERNAME = "imap_username";
  private String imapUsername;

  public static final String JSON_PROPERTY_IMAP_USE_SSL_TLS = "imap_use_ssl_tls";
  private Boolean imapUseSslTls;

  public static final String JSON_PROPERTY_IMAP_USE_START_TLS = "imap_use_start_tls";
  private Boolean imapUseStartTls;

  public static final String JSON_PROPERTY_IMAP_AUTHENTICATION_TYPE = "imap_authentication_type";
  private String imapAuthenticationType;

  public static final String JSON_PROPERTY_IMAP_SSL_VERIFY_MODE = "imap_ssl_verify_mode";
  private String imapSslVerifyMode;

  public static final String JSON_PROPERTY_SMTP_ADDRESS = "smtp_address";
  private String smtpAddress;

  public static final String JSON_PROPERTY_SMTP_PORT = "smtp_port";
  private Integer smtpPort;

  public static final String JSON_PROPERTY_SMTP_USERNAME = "smtp_username";
  private String smtpUsername;

  public static final String JSON_PROPERTY_SMTP_USE_SSL_TLS = "smtp_use_ssl_tls";
  private Boolean smtpUseSslTls;

  public static final String JSON_PROPERTY_SMTP_USE_START_TLS = "smtp_use_start_tls";
  private Boolean smtpUseStartTls;

  public static final String JSON_PROPERTY_SMTP_AUTHENTICATION_TYPE = "smtp_authentication_type";
  private String smtpAuthenticationType;

  public static final String JSON_PROPERTY_SMTP_SSL_VERIFY_MODE = "smtp_ssl_verify_mode";
  private String smtpSslVerifyMode;

  public static final String JSON_PROPERTY_SMTP_HELO_DOMAIN = "smtp_helo_domain";
  private String smtpHeloDomain;

  public static final String JSON_PROPERTY_THREADING_HEURISTICS = "threading_heuristics";
  private Boolean threadingHeuristics;

  public static final String JSON_PROPERTY_SPAM_ASSASSIN_LEVEL = "spam_assassin_level";
  private String spamAssassinLevel;

  public static final String JSON_PROPERTY_WHITELISTED_EMAILS = "whitelisted_emails";
  private String whitelistedEmails;

  public static final String JSON_PROPERTY_CC_BLACKLIST = "cc_blacklist";
  private List<String> ccBlacklist = null;

  public static final String JSON_PROPERTY_POSTMARK_ENABLED = "postmark_enabled";
  private Boolean postmarkEnabled;

  public Source() { 
  }

  public Source active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Activate/deactivate the source
   * @return active
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public Source autoDetectContentLanguage(Boolean autoDetectContentLanguage) {
    this.autoDetectContentLanguage = autoDetectContentLanguage;
    return this;
  }

   /**
   * Auto-detect content language (Boolean)
   * @return autoDetectContentLanguage
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTO_DETECT_CONTENT_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getAutoDetectContentLanguage() {
    return autoDetectContentLanguage;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_DETECT_CONTENT_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutoDetectContentLanguage(Boolean autoDetectContentLanguage) {
    this.autoDetectContentLanguage = autoDetectContentLanguage;
  }


  public Source channelId(String channelId) {
    this.channelId = channelId;
    return this;
  }

   /**
   * Get channelId
   * @return channelId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CHANNEL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getChannelId() {
    return channelId;
  }


  @JsonProperty(JSON_PROPERTY_CHANNEL_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setChannelId(String channelId) {
    this.channelId = channelId;
  }


  public Source color(Integer color) {
    this.color = color;
    return this;
  }

   /**
   * Color of the icon: Default: 0 Blue: 1 Green: 2 Turquoise: 3 Purple: 4 Yellow: 5 Orange: 6 Red: 7 Asphalt: 8 Grey: 9
   * @return color
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getColor() {
    return color;
  }


  @JsonProperty(JSON_PROPERTY_COLOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setColor(Integer color) {
    this.color = color;
  }


  public Source communityId(String communityId) {
    this.communityId = communityId;
    return this;
  }

   /**
   * Get communityId
   * @return communityId
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_COMMUNITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getCommunityId() {
    return communityId;
  }


  @JsonProperty(JSON_PROPERTY_COMMUNITY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCommunityId(String communityId) {
    this.communityId = communityId;
  }


  public Source contentArchiving(Boolean contentArchiving) {
    this.contentArchiving = contentArchiving;
    return this;
  }

   /**
   * Automatic archiving of old contents (Boolean)
   * @return contentArchiving
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_ARCHIVING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getContentArchiving() {
    return contentArchiving;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_ARCHIVING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentArchiving(Boolean contentArchiving) {
    this.contentArchiving = contentArchiving;
  }


  public Source contentArchivingPeriod(Long contentArchivingPeriod) {
    this.contentArchivingPeriod = contentArchivingPeriod;
    return this;
  }

   /**
   * Archive contents older than (seconds)
   * @return contentArchivingPeriod
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_ARCHIVING_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Long getContentArchivingPeriod() {
    return contentArchivingPeriod;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_ARCHIVING_PERIOD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentArchivingPeriod(Long contentArchivingPeriod) {
    this.contentArchivingPeriod = contentArchivingPeriod;
  }


  public Source contentLanguages(List<String> contentLanguages) {
    this.contentLanguages = contentLanguages;
    return this;
  }

  public Source addContentLanguagesItem(String contentLanguagesItem) {
    if (this.contentLanguages == null) {
      this.contentLanguages = new ArrayList<>();
    }
    this.contentLanguages.add(contentLanguagesItem);
    return this;
  }

   /**
   * Get contentLanguages
   * @return contentLanguages
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CONTENT_LANGUAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getContentLanguages() {
    return contentLanguages;
  }


  @JsonProperty(JSON_PROPERTY_CONTENT_LANGUAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setContentLanguages(List<String> contentLanguages) {
    this.contentLanguages = contentLanguages;
  }


  public Source createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Source defaultCategoryIds(List<String> defaultCategoryIds) {
    this.defaultCategoryIds = defaultCategoryIds;
    return this;
  }

  public Source addDefaultCategoryIdsItem(String defaultCategoryIdsItem) {
    if (this.defaultCategoryIds == null) {
      this.defaultCategoryIds = new ArrayList<>();
    }
    this.defaultCategoryIds.add(defaultCategoryIdsItem);
    return this;
  }

   /**
   * Default categories
   * @return defaultCategoryIds
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_CATEGORY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getDefaultCategoryIds() {
    return defaultCategoryIds;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_CATEGORY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultCategoryIds(List<String> defaultCategoryIds) {
    this.defaultCategoryIds = defaultCategoryIds;
  }


  public Source defaultContentLanguage(String defaultContentLanguage) {
    this.defaultContentLanguage = defaultContentLanguage;
    return this;
  }

   /**
   * Default content language
   * @return defaultContentLanguage
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_CONTENT_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDefaultContentLanguage() {
    return defaultContentLanguage;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_CONTENT_LANGUAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultContentLanguage(String defaultContentLanguage) {
    this.defaultContentLanguage = defaultContentLanguage;
  }


  public Source enableAndroid(Boolean enableAndroid) {
    this.enableAndroid = enableAndroid;
    return this;
  }

   /**
   * Only on Engage Messaging sources. Boolean describing if the source is enabled on Android or not.
   * @return enableAndroid
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_ANDROID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableAndroid() {
    return enableAndroid;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_ANDROID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableAndroid(Boolean enableAndroid) {
    this.enableAndroid = enableAndroid;
  }


  public Source enableIos(Boolean enableIos) {
    this.enableIos = enableIos;
    return this;
  }

   /**
   * Only on Engage Messaging sources. Boolean describing if the source is enabled on iOS or not.
   * @return enableIos
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_IOS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableIos() {
    return enableIos;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_IOS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableIos(Boolean enableIos) {
    this.enableIos = enableIos;
  }


  public Source enableWeb(Boolean enableWeb) {
    this.enableWeb = enableWeb;
    return this;
  }

   /**
   * Only on Engage Messaging sources. Boolean describing if the source is enabled on the web or not.
   * @return enableWeb
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ENABLE_WEB)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEnableWeb() {
    return enableWeb;
  }


  @JsonProperty(JSON_PROPERTY_ENABLE_WEB)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEnableWeb(Boolean enableWeb) {
    this.enableWeb = enableWeb;
  }


  public Source autoResponseTriggers(List<SourceAutoResponseTriggersInner> autoResponseTriggers) {
    this.autoResponseTriggers = autoResponseTriggers;
    return this;
  }

  public Source addAutoResponseTriggersItem(SourceAutoResponseTriggersInner autoResponseTriggersItem) {
    if (this.autoResponseTriggers == null) {
      this.autoResponseTriggers = new ArrayList<>();
    }
    this.autoResponseTriggers.add(autoResponseTriggersItem);
    return this;
  }

   /**
   * Automatic Messages. Only on sources which supports Automatic Messages.
   * @return autoResponseTriggers
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTO_RESPONSE_TRIGGERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SourceAutoResponseTriggersInner> getAutoResponseTriggers() {
    return autoResponseTriggers;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_RESPONSE_TRIGGERS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutoResponseTriggers(List<SourceAutoResponseTriggersInner> autoResponseTriggers) {
    this.autoResponseTriggers = autoResponseTriggers;
  }


  public Source autoResponseTriggerEnabled(SourceAutoResponseTriggerEnabled autoResponseTriggerEnabled) {
    this.autoResponseTriggerEnabled = autoResponseTriggerEnabled;
    return this;
  }

   /**
   * Get autoResponseTriggerEnabled
   * @return autoResponseTriggerEnabled
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTO_RESPONSE_TRIGGER_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SourceAutoResponseTriggerEnabled getAutoResponseTriggerEnabled() {
    return autoResponseTriggerEnabled;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_RESPONSE_TRIGGER_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutoResponseTriggerEnabled(SourceAutoResponseTriggerEnabled autoResponseTriggerEnabled) {
    this.autoResponseTriggerEnabled = autoResponseTriggerEnabled;
  }


  public Source autoResponseTriggerGracePeriods(SourceAutoResponseTriggerGracePeriods autoResponseTriggerGracePeriods) {
    this.autoResponseTriggerGracePeriods = autoResponseTriggerGracePeriods;
    return this;
  }

   /**
   * Get autoResponseTriggerGracePeriods
   * @return autoResponseTriggerGracePeriods
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_AUTO_RESPONSE_TRIGGER_GRACE_PERIODS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SourceAutoResponseTriggerGracePeriods getAutoResponseTriggerGracePeriods() {
    return autoResponseTriggerGracePeriods;
  }


  @JsonProperty(JSON_PROPERTY_AUTO_RESPONSE_TRIGGER_GRACE_PERIODS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAutoResponseTriggerGracePeriods(SourceAutoResponseTriggerGracePeriods autoResponseTriggerGracePeriods) {
    this.autoResponseTriggerGracePeriods = autoResponseTriggerGracePeriods;
  }


  public Source signatures(List<SourceSignaturesInner> signatures) {
    this.signatures = signatures;
    return this;
  }

  public Source addSignaturesItem(SourceSignaturesInner signaturesItem) {
    if (this.signatures == null) {
      this.signatures = new ArrayList<>();
    }
    this.signatures.add(signaturesItem);
    return this;
  }

   /**
   * Signatures.
   * @return signatures
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SIGNATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SourceSignaturesInner> getSignatures() {
    return signatures;
  }


  @JsonProperty(JSON_PROPERTY_SIGNATURES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSignatures(List<SourceSignaturesInner> signatures) {
    this.signatures = signatures;
  }


  public Source fromName(String fromName) {
    this.fromName = fromName;
    return this;
  }

   /**
   * Custom sender name. Only on sources which supports a custom sender name.
   * @return fromName
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FROM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getFromName() {
    return fromName;
  }


  @JsonProperty(JSON_PROPERTY_FROM_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFromName(String fromName) {
    this.fromName = fromName;
  }


  public Source errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Get errorMessage
   * @return errorMessage
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getErrorMessage() {
    return errorMessage;
  }


  @JsonProperty(JSON_PROPERTY_ERROR_MESSAGE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public Source templateMessageNamespace(String templateMessageNamespace) {
    this.templateMessageNamespace = templateMessageNamespace;
    return this;
  }

   /**
   * Only on WhatsApp Sources. Internal WhatsApp field that can also be found on the business manager (unique per WhatsApp account).
   * @return templateMessageNamespace
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMPLATE_MESSAGE_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getTemplateMessageNamespace() {
    return templateMessageNamespace;
  }


  @JsonProperty(JSON_PROPERTY_TEMPLATE_MESSAGE_NAMESPACE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemplateMessageNamespace(String templateMessageNamespace) {
    this.templateMessageNamespace = templateMessageNamespace;
  }


  public Source hiddenFromStats(Boolean hiddenFromStats) {
    this.hiddenFromStats = hiddenFromStats;
    return this;
  }

   /**
   * Hide from statistics
   * @return hiddenFromStats
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_HIDDEN_FROM_STATS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getHiddenFromStats() {
    return hiddenFromStats;
  }


  @JsonProperty(JSON_PROPERTY_HIDDEN_FROM_STATS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setHiddenFromStats(Boolean hiddenFromStats) {
    this.hiddenFromStats = hiddenFromStats;
  }


  public Source id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setId(String id) {
    this.id = id;
  }


  public Source interventionMessagesBoost(Integer interventionMessagesBoost) {
    this.interventionMessagesBoost = interventionMessagesBoost;
    return this;
  }

   /**
   * Priority boost of messages with intervention
   * @return interventionMessagesBoost
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INTERVENTION_MESSAGES_BOOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getInterventionMessagesBoost() {
    return interventionMessagesBoost;
  }


  @JsonProperty(JSON_PROPERTY_INTERVENTION_MESSAGES_BOOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setInterventionMessagesBoost(Integer interventionMessagesBoost) {
    this.interventionMessagesBoost = interventionMessagesBoost;
  }


  public Source liveChat(Boolean liveChat) {
    this.liveChat = liveChat;
    return this;
  }

   /**
   * Only on Engage Messaging sources. Boolean describing if the source is livechat or not.
   * @return liveChat
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_LIVE_CHAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getLiveChat() {
    return liveChat;
  }


  @JsonProperty(JSON_PROPERTY_LIVE_CHAT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setLiveChat(Boolean liveChat) {
    this.liveChat = liveChat;
  }


  public Source name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Source name
   * @return name
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getName() {
    return name;
  }


  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setName(String name) {
    this.name = name;
  }


  public Source slaExpiredStrategy(SlaExpiredStrategyEnum slaExpiredStrategy) {
    this.slaExpiredStrategy = slaExpiredStrategy;
    return this;
  }

   /**
   * SLA expired strategy (\&quot;max\&quot;, \&quot;half\&quot; or \&quot;base\&quot;)
   * @return slaExpiredStrategy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLA_EXPIRED_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public SlaExpiredStrategyEnum getSlaExpiredStrategy() {
    return slaExpiredStrategy;
  }


  @JsonProperty(JSON_PROPERTY_SLA_EXPIRED_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlaExpiredStrategy(SlaExpiredStrategyEnum slaExpiredStrategy) {
    this.slaExpiredStrategy = slaExpiredStrategy;
  }


  public Source slaResponse(Integer slaResponse) {
    this.slaResponse = slaResponse;
    return this;
  }

   /**
   * Response time (seconds)
   * @return slaResponse
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLA_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSlaResponse() {
    return slaResponse;
  }


  @JsonProperty(JSON_PROPERTY_SLA_RESPONSE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlaResponse(Integer slaResponse) {
    this.slaResponse = slaResponse;
  }


  public Source slaThreshold(Integer slaThreshold) {
    this.slaThreshold = slaThreshold;
    return this;
  }

   /**
   * Customer SLA warning threshold (must be greater than 0 and less than 100, default value is 0).
   * @return slaThreshold
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLA_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSlaThreshold() {
    return slaThreshold;
  }


  @JsonProperty(JSON_PROPERTY_SLA_THRESHOLD)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlaThreshold(Integer slaThreshold) {
    this.slaThreshold = slaThreshold;
  }


  public Source slaFilteringCategoriesStrategy(String slaFilteringCategoriesStrategy) {
    this.slaFilteringCategoriesStrategy = slaFilteringCategoriesStrategy;
    return this;
  }

   /**
   * Categories filtering strategy for Customer SLA indicator (\&quot;ignored_categories\&quot; or \&quot;selected_categories\&quot;)
   * @return slaFilteringCategoriesStrategy
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLA_FILTERING_CATEGORIES_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSlaFilteringCategoriesStrategy() {
    return slaFilteringCategoriesStrategy;
  }


  @JsonProperty(JSON_PROPERTY_SLA_FILTERING_CATEGORIES_STRATEGY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlaFilteringCategoriesStrategy(String slaFilteringCategoriesStrategy) {
    this.slaFilteringCategoriesStrategy = slaFilteringCategoriesStrategy;
  }


  public Source slaFilteringCategoryIds(List<String> slaFilteringCategoryIds) {
    this.slaFilteringCategoryIds = slaFilteringCategoryIds;
    return this;
  }

  public Source addSlaFilteringCategoryIdsItem(String slaFilteringCategoryIdsItem) {
    if (this.slaFilteringCategoryIds == null) {
      this.slaFilteringCategoryIds = new ArrayList<>();
    }
    this.slaFilteringCategoryIds.add(slaFilteringCategoryIdsItem);
    return this;
  }

   /**
   * Filtering categories for Customer SLA indicator
   * @return slaFilteringCategoryIds
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SLA_FILTERING_CATEGORY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getSlaFilteringCategoryIds() {
    return slaFilteringCategoryIds;
  }


  @JsonProperty(JSON_PROPERTY_SLA_FILTERING_CATEGORY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSlaFilteringCategoryIds(List<String> slaFilteringCategoryIds) {
    this.slaFilteringCategoryIds = slaFilteringCategoryIds;
  }


  public Source defaultTaskPriority(Integer defaultTaskPriority) {
    this.defaultTaskPriority = defaultTaskPriority;
    return this;
  }

   /**
   * Default priority for interactions
   * @return defaultTaskPriority
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DEFAULT_TASK_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getDefaultTaskPriority() {
    return defaultTaskPriority;
  }


  @JsonProperty(JSON_PROPERTY_DEFAULT_TASK_PRIORITY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDefaultTaskPriority(Integer defaultTaskPriority) {
    this.defaultTaskPriority = defaultTaskPriority;
  }


  public Source status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getStatus() {
    return status;
  }


  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStatus(String status) {
    this.status = status;
  }


  public Source templateMessages(List<SourceTemplateMessagesInner> templateMessages) {
    this.templateMessages = templateMessages;
    return this;
  }

  public Source addTemplateMessagesItem(SourceTemplateMessagesInner templateMessagesItem) {
    if (this.templateMessages == null) {
      this.templateMessages = new ArrayList<>();
    }
    this.templateMessages.add(templateMessagesItem);
    return this;
  }

   /**
   * Only for WhatsApp Sources, list of the available message templates that can be used to send outbound messages.
   * @return templateMessages
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TEMPLATE_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<SourceTemplateMessagesInner> getTemplateMessages() {
    return templateMessages;
  }


  @JsonProperty(JSON_PROPERTY_TEMPLATE_MESSAGES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTemplateMessages(List<SourceTemplateMessagesInner> templateMessages) {
    this.templateMessages = templateMessages;
  }


  public Source timeSheetIds(List<String> timeSheetIds) {
    this.timeSheetIds = timeSheetIds;
    return this;
  }

  public Source addTimeSheetIdsItem(String timeSheetIdsItem) {
    if (this.timeSheetIds == null) {
      this.timeSheetIds = new ArrayList<>();
    }
    this.timeSheetIds.add(timeSheetIdsItem);
    return this;
  }

   /**
   * Business Hours (Limited to 1)
   * @return timeSheetIds
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIME_SHEET_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getTimeSheetIds() {
    return timeSheetIds;
  }


  @JsonProperty(JSON_PROPERTY_TIME_SHEET_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeSheetIds(List<String> timeSheetIds) {
    this.timeSheetIds = timeSheetIds;
  }


  public Source transferredTasksBoost(Integer transferredTasksBoost) {
    this.transferredTasksBoost = transferredTasksBoost;
    return this;
  }

   /**
   * Priority boost of transferred tasks
   * @return transferredTasksBoost
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TRANSFERRED_TASKS_BOOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTransferredTasksBoost() {
    return transferredTasksBoost;
  }


  @JsonProperty(JSON_PROPERTY_TRANSFERRED_TASKS_BOOST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTransferredTasksBoost(Integer transferredTasksBoost) {
    this.transferredTasksBoost = transferredTasksBoost;
  }


  public Source attachmentsSecurityLevel(String attachmentsSecurityLevel) {
    this.attachmentsSecurityLevel = attachmentsSecurityLevel;
    return this;
  }

   /**
   * Attachments security level. (\&quot;strict\&quot;, \&quot;relaxed\&quot;, or \&quot;permissive\&quot;). Strict allows images and medias. Relaxed allows images, media and documents. Permissive allows all kind of attachments
   * @return attachmentsSecurityLevel
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ATTACHMENTS_SECURITY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getAttachmentsSecurityLevel() {
    return attachmentsSecurityLevel;
  }


  @JsonProperty(JSON_PROPERTY_ATTACHMENTS_SECURITY_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAttachmentsSecurityLevel(String attachmentsSecurityLevel) {
    this.attachmentsSecurityLevel = attachmentsSecurityLevel;
  }


  public Source type(String type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getType() {
    return type;
  }


  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(String type) {
    this.type = type;
  }


  public Source updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Source userThreadDefaultCategoryIds(List<String> userThreadDefaultCategoryIds) {
    this.userThreadDefaultCategoryIds = userThreadDefaultCategoryIds;
    return this;
  }

  public Source addUserThreadDefaultCategoryIdsItem(String userThreadDefaultCategoryIdsItem) {
    if (this.userThreadDefaultCategoryIds == null) {
      this.userThreadDefaultCategoryIds = new ArrayList<>();
    }
    this.userThreadDefaultCategoryIds.add(userThreadDefaultCategoryIdsItem);
    return this;
  }

   /**
   * Default categories (agent messages)
   * @return userThreadDefaultCategoryIds
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USER_THREAD_DEFAULT_CATEGORY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getUserThreadDefaultCategoryIds() {
    return userThreadDefaultCategoryIds;
  }


  @JsonProperty(JSON_PROPERTY_USER_THREAD_DEFAULT_CATEGORY_IDS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUserThreadDefaultCategoryIds(List<String> userThreadDefaultCategoryIds) {
    this.userThreadDefaultCategoryIds = userThreadDefaultCategoryIds;
  }


  public Source timeForThreadInclusion(Integer timeForThreadInclusion) {
    this.timeForThreadInclusion = timeForThreadInclusion;
    return this;
  }

   /**
   * Time for thread inclusion
   * @return timeForThreadInclusion
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIME_FOR_THREAD_INCLUSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getTimeForThreadInclusion() {
    return timeForThreadInclusion;
  }


  @JsonProperty(JSON_PROPERTY_TIME_FOR_THREAD_INCLUSION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeForThreadInclusion(Integer timeForThreadInclusion) {
    this.timeForThreadInclusion = timeForThreadInclusion;
  }


  public Source timeForThreadInclusionEnabled(Boolean timeForThreadInclusionEnabled) {
    this.timeForThreadInclusionEnabled = timeForThreadInclusionEnabled;
    return this;
  }

   /**
   * Enable time for thread inclusion. Only on Email sources
   * @return timeForThreadInclusionEnabled
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIME_FOR_THREAD_INCLUSION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getTimeForThreadInclusionEnabled() {
    return timeForThreadInclusionEnabled;
  }


  @JsonProperty(JSON_PROPERTY_TIME_FOR_THREAD_INCLUSION_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimeForThreadInclusionEnabled(Boolean timeForThreadInclusionEnabled) {
    this.timeForThreadInclusionEnabled = timeForThreadInclusionEnabled;
  }


  public Source emailParser(Boolean emailParser) {
    this.emailParser = emailParser;
    return this;
  }

   /**
   * Email parser (BBCode). Only on Email sources
   * @return emailParser
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EMAIL_PARSER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getEmailParser() {
    return emailParser;
  }


  @JsonProperty(JSON_PROPERTY_EMAIL_PARSER)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEmailParser(Boolean emailParser) {
    this.emailParser = emailParser;
  }


  public Source imapSmtpEmail(String imapSmtpEmail) {
    this.imapSmtpEmail = imapSmtpEmail;
    return this;
  }

   /**
   * Email address to synchronize. Only on Email sources
   * @return imapSmtpEmail
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAP_SMTP_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImapSmtpEmail() {
    return imapSmtpEmail;
  }


  @JsonProperty(JSON_PROPERTY_IMAP_SMTP_EMAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImapSmtpEmail(String imapSmtpEmail) {
    this.imapSmtpEmail = imapSmtpEmail;
  }


  public Source imapMailboxesToImport(List<String> imapMailboxesToImport) {
    this.imapMailboxesToImport = imapMailboxesToImport;
    return this;
  }

  public Source addImapMailboxesToImportItem(String imapMailboxesToImportItem) {
    if (this.imapMailboxesToImport == null) {
      this.imapMailboxesToImport = new ArrayList<>();
    }
    this.imapMailboxesToImport.add(imapMailboxesToImportItem);
    return this;
  }

   /**
   * Folders to synchronize. Only on Email sources
   * @return imapMailboxesToImport
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAP_MAILBOXES_TO_IMPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getImapMailboxesToImport() {
    return imapMailboxesToImport;
  }


  @JsonProperty(JSON_PROPERTY_IMAP_MAILBOXES_TO_IMPORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImapMailboxesToImport(List<String> imapMailboxesToImport) {
    this.imapMailboxesToImport = imapMailboxesToImport;
  }


  public Source imapMailboxUsedForSentMail(String imapMailboxUsedForSentMail) {
    this.imapMailboxUsedForSentMail = imapMailboxUsedForSentMail;
    return this;
  }

   /**
   * Folder for &#39;Sent Mail&#39;. Only on Email sources
   * @return imapMailboxUsedForSentMail
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAP_MAILBOX_USED_FOR_SENT_MAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImapMailboxUsedForSentMail() {
    return imapMailboxUsedForSentMail;
  }


  @JsonProperty(JSON_PROPERTY_IMAP_MAILBOX_USED_FOR_SENT_MAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImapMailboxUsedForSentMail(String imapMailboxUsedForSentMail) {
    this.imapMailboxUsedForSentMail = imapMailboxUsedForSentMail;
  }


  public Source imapAddress(String imapAddress) {
    this.imapAddress = imapAddress;
    return this;
  }

   /**
   * IMAP server address. Only on Email sources
   * @return imapAddress
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImapAddress() {
    return imapAddress;
  }


  @JsonProperty(JSON_PROPERTY_IMAP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImapAddress(String imapAddress) {
    this.imapAddress = imapAddress;
  }


  public Source imapPort(Integer imapPort) {
    this.imapPort = imapPort;
    return this;
  }

   /**
   * IMAP server port. Only on Email sources
   * @return imapPort
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAP_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getImapPort() {
    return imapPort;
  }


  @JsonProperty(JSON_PROPERTY_IMAP_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImapPort(Integer imapPort) {
    this.imapPort = imapPort;
  }


  public Source imapUsername(String imapUsername) {
    this.imapUsername = imapUsername;
    return this;
  }

   /**
   * IMAP username. Only on Email sources
   * @return imapUsername
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAP_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImapUsername() {
    return imapUsername;
  }


  @JsonProperty(JSON_PROPERTY_IMAP_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImapUsername(String imapUsername) {
    this.imapUsername = imapUsername;
  }


  public Source imapUseSslTls(Boolean imapUseSslTls) {
    this.imapUseSslTls = imapUseSslTls;
    return this;
  }

   /**
   * Use SSL/TLS protocol to establish secure IMAP connection. Only on Email sources
   * @return imapUseSslTls
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAP_USE_SSL_TLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getImapUseSslTls() {
    return imapUseSslTls;
  }


  @JsonProperty(JSON_PROPERTY_IMAP_USE_SSL_TLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImapUseSslTls(Boolean imapUseSslTls) {
    this.imapUseSslTls = imapUseSslTls;
  }


  public Source imapUseStartTls(Boolean imapUseStartTls) {
    this.imapUseStartTls = imapUseStartTls;
    return this;
  }

   /**
   * Use STARTTLS protocol to establish secure IMAP connection. Only on Email sources
   * @return imapUseStartTls
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAP_USE_START_TLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getImapUseStartTls() {
    return imapUseStartTls;
  }


  @JsonProperty(JSON_PROPERTY_IMAP_USE_START_TLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImapUseStartTls(Boolean imapUseStartTls) {
    this.imapUseStartTls = imapUseStartTls;
  }


  public Source imapAuthenticationType(String imapAuthenticationType) {
    this.imapAuthenticationType = imapAuthenticationType;
    return this;
  }

   /**
   * IMAP Authentication type (\&quot;basic\&quot; or \&quot;microsoft_identity_platform\&quot;). Only on Email sources
   * @return imapAuthenticationType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAP_AUTHENTICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImapAuthenticationType() {
    return imapAuthenticationType;
  }


  @JsonProperty(JSON_PROPERTY_IMAP_AUTHENTICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImapAuthenticationType(String imapAuthenticationType) {
    this.imapAuthenticationType = imapAuthenticationType;
  }


  public Source imapSslVerifyMode(String imapSslVerifyMode) {
    this.imapSslVerifyMode = imapSslVerifyMode;
    return this;
  }

   /**
   * IMAP SSL verification mode. (\&quot;NONE\&quot;, \&quot;PEER\&quot;, \&quot;CLIENT_ONCE\&quot; or \&quot;FAIL_IF_NO_PEER_CERT\&quot;). Only on Email sources
   * @return imapSslVerifyMode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_IMAP_SSL_VERIFY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getImapSslVerifyMode() {
    return imapSslVerifyMode;
  }


  @JsonProperty(JSON_PROPERTY_IMAP_SSL_VERIFY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setImapSslVerifyMode(String imapSslVerifyMode) {
    this.imapSslVerifyMode = imapSslVerifyMode;
  }


  public Source smtpAddress(String smtpAddress) {
    this.smtpAddress = smtpAddress;
    return this;
  }

   /**
   * SMTP server address. Only on Email sources
   * @return smtpAddress
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SMTP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSmtpAddress() {
    return smtpAddress;
  }


  @JsonProperty(JSON_PROPERTY_SMTP_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmtpAddress(String smtpAddress) {
    this.smtpAddress = smtpAddress;
  }


  public Source smtpPort(Integer smtpPort) {
    this.smtpPort = smtpPort;
    return this;
  }

   /**
   * SMTP server port. Only on Email sources
   * @return smtpPort
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SMTP_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getSmtpPort() {
    return smtpPort;
  }


  @JsonProperty(JSON_PROPERTY_SMTP_PORT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmtpPort(Integer smtpPort) {
    this.smtpPort = smtpPort;
  }


  public Source smtpUsername(String smtpUsername) {
    this.smtpUsername = smtpUsername;
    return this;
  }

   /**
   * SMTP username. Only on Email sources
   * @return smtpUsername
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SMTP_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSmtpUsername() {
    return smtpUsername;
  }


  @JsonProperty(JSON_PROPERTY_SMTP_USERNAME)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmtpUsername(String smtpUsername) {
    this.smtpUsername = smtpUsername;
  }


  public Source smtpUseSslTls(Boolean smtpUseSslTls) {
    this.smtpUseSslTls = smtpUseSslTls;
    return this;
  }

   /**
   * Use SSL/TLS protocol to establish secure SMTP connection. Only on Email sources
   * @return smtpUseSslTls
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SMTP_USE_SSL_TLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSmtpUseSslTls() {
    return smtpUseSslTls;
  }


  @JsonProperty(JSON_PROPERTY_SMTP_USE_SSL_TLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmtpUseSslTls(Boolean smtpUseSslTls) {
    this.smtpUseSslTls = smtpUseSslTls;
  }


  public Source smtpUseStartTls(Boolean smtpUseStartTls) {
    this.smtpUseStartTls = smtpUseStartTls;
    return this;
  }

   /**
   * Use STARTTLS protocol to establish secure SMTP connection. Only on Email sources
   * @return smtpUseStartTls
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SMTP_USE_START_TLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getSmtpUseStartTls() {
    return smtpUseStartTls;
  }


  @JsonProperty(JSON_PROPERTY_SMTP_USE_START_TLS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmtpUseStartTls(Boolean smtpUseStartTls) {
    this.smtpUseStartTls = smtpUseStartTls;
  }


  public Source smtpAuthenticationType(String smtpAuthenticationType) {
    this.smtpAuthenticationType = smtpAuthenticationType;
    return this;
  }

   /**
   * SMTP Authentication type (\&quot;basic\&quot; or \&quot;microsoft_identity_platform\&quot;). Only on Email sources
   * @return smtpAuthenticationType
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SMTP_AUTHENTICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSmtpAuthenticationType() {
    return smtpAuthenticationType;
  }


  @JsonProperty(JSON_PROPERTY_SMTP_AUTHENTICATION_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmtpAuthenticationType(String smtpAuthenticationType) {
    this.smtpAuthenticationType = smtpAuthenticationType;
  }


  public Source smtpSslVerifyMode(String smtpSslVerifyMode) {
    this.smtpSslVerifyMode = smtpSslVerifyMode;
    return this;
  }

   /**
   * SMTP SSL verification mode (\&quot;NONE\&quot;, \&quot;PEER\&quot;, \&quot;CLIENT_ONCE\&quot; or \&quot;FAIL_IF_NO_PEER_CERT\&quot;). Only on Email sources
   * @return smtpSslVerifyMode
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SMTP_SSL_VERIFY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSmtpSslVerifyMode() {
    return smtpSslVerifyMode;
  }


  @JsonProperty(JSON_PROPERTY_SMTP_SSL_VERIFY_MODE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmtpSslVerifyMode(String smtpSslVerifyMode) {
    this.smtpSslVerifyMode = smtpSslVerifyMode;
  }


  public Source smtpHeloDomain(String smtpHeloDomain) {
    this.smtpHeloDomain = smtpHeloDomain;
    return this;
  }

   /**
   * Used to identify HELO/EHLO when connecting to the SMTP server. Only on Email sources
   * @return smtpHeloDomain
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SMTP_HELO_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSmtpHeloDomain() {
    return smtpHeloDomain;
  }


  @JsonProperty(JSON_PROPERTY_SMTP_HELO_DOMAIN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSmtpHeloDomain(String smtpHeloDomain) {
    this.smtpHeloDomain = smtpHeloDomain;
  }


  public Source threadingHeuristics(Boolean threadingHeuristics) {
    this.threadingHeuristics = threadingHeuristics;
    return this;
  }

   /**
   * Threading_heuristics. Only on Email sources
   * @return threadingHeuristics
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THREADING_HEURISTICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getThreadingHeuristics() {
    return threadingHeuristics;
  }


  @JsonProperty(JSON_PROPERTY_THREADING_HEURISTICS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThreadingHeuristics(Boolean threadingHeuristics) {
    this.threadingHeuristics = threadingHeuristics;
  }


  public Source spamAssassinLevel(String spamAssassinLevel) {
    this.spamAssassinLevel = spamAssassinLevel;
    return this;
  }

   /**
   * Spam threshold (\&quot;disabled\&quot;, \&quot;relaxed\&quot;, or \&quot;strict\&quot;). Only on Email sources
   * @return spamAssassinLevel
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_SPAM_ASSASSIN_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getSpamAssassinLevel() {
    return spamAssassinLevel;
  }


  @JsonProperty(JSON_PROPERTY_SPAM_ASSASSIN_LEVEL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setSpamAssassinLevel(String spamAssassinLevel) {
    this.spamAssassinLevel = spamAssassinLevel;
  }


  public Source whitelistedEmails(String whitelistedEmails) {
    this.whitelistedEmails = whitelistedEmails;
    return this;
  }

   /**
   * Whitelisted emails. All emails received from this address won&#39;t be threaded and can be associated with an anonymous identity or the Reply-To, if there is one. To be filled when implementing a form. Only on Email sources
   * @return whitelistedEmails
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WHITELISTED_EMAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWhitelistedEmails() {
    return whitelistedEmails;
  }


  @JsonProperty(JSON_PROPERTY_WHITELISTED_EMAILS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWhitelistedEmails(String whitelistedEmails) {
    this.whitelistedEmails = whitelistedEmails;
  }


  public Source ccBlacklist(List<String> ccBlacklist) {
    this.ccBlacklist = ccBlacklist;
    return this;
  }

  public Source addCcBlacklistItem(String ccBlacklistItem) {
    if (this.ccBlacklist == null) {
      this.ccBlacklist = new ArrayList<>();
    }
    this.ccBlacklist.add(ccBlacklistItem);
    return this;
  }

   /**
   * Exclude from TO/CC. Only on Email sources
   * @return ccBlacklist
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_CC_BLACKLIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getCcBlacklist() {
    return ccBlacklist;
  }


  @JsonProperty(JSON_PROPERTY_CC_BLACKLIST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setCcBlacklist(List<String> ccBlacklist) {
    this.ccBlacklist = ccBlacklist;
  }


  public Source postmarkEnabled(Boolean postmarkEnabled) {
    this.postmarkEnabled = postmarkEnabled;
    return this;
  }

   /**
   * Enable Postmark. Only on Email sources
   * @return postmarkEnabled
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_POSTMARK_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getPostmarkEnabled() {
    return postmarkEnabled;
  }


  @JsonProperty(JSON_PROPERTY_POSTMARK_ENABLED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPostmarkEnabled(Boolean postmarkEnabled) {
    this.postmarkEnabled = postmarkEnabled;
  }


  /**
   * Return true if this Source object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Source source = (Source) o;
    return Objects.equals(this.active, source.active) &&
        Objects.equals(this.autoDetectContentLanguage, source.autoDetectContentLanguage) &&
        Objects.equals(this.channelId, source.channelId) &&
        Objects.equals(this.color, source.color) &&
        Objects.equals(this.communityId, source.communityId) &&
        Objects.equals(this.contentArchiving, source.contentArchiving) &&
        Objects.equals(this.contentArchivingPeriod, source.contentArchivingPeriod) &&
        Objects.equals(this.contentLanguages, source.contentLanguages) &&
        Objects.equals(this.createdAt, source.createdAt) &&
        Objects.equals(this.defaultCategoryIds, source.defaultCategoryIds) &&
        Objects.equals(this.defaultContentLanguage, source.defaultContentLanguage) &&
        Objects.equals(this.enableAndroid, source.enableAndroid) &&
        Objects.equals(this.enableIos, source.enableIos) &&
        Objects.equals(this.enableWeb, source.enableWeb) &&
        Objects.equals(this.autoResponseTriggers, source.autoResponseTriggers) &&
        Objects.equals(this.autoResponseTriggerEnabled, source.autoResponseTriggerEnabled) &&
        Objects.equals(this.autoResponseTriggerGracePeriods, source.autoResponseTriggerGracePeriods) &&
        Objects.equals(this.signatures, source.signatures) &&
        Objects.equals(this.fromName, source.fromName) &&
        Objects.equals(this.errorMessage, source.errorMessage) &&
        Objects.equals(this.templateMessageNamespace, source.templateMessageNamespace) &&
        Objects.equals(this.hiddenFromStats, source.hiddenFromStats) &&
        Objects.equals(this.id, source.id) &&
        Objects.equals(this.interventionMessagesBoost, source.interventionMessagesBoost) &&
        Objects.equals(this.liveChat, source.liveChat) &&
        Objects.equals(this.name, source.name) &&
        Objects.equals(this.slaExpiredStrategy, source.slaExpiredStrategy) &&
        Objects.equals(this.slaResponse, source.slaResponse) &&
        Objects.equals(this.slaThreshold, source.slaThreshold) &&
        Objects.equals(this.slaFilteringCategoriesStrategy, source.slaFilteringCategoriesStrategy) &&
        Objects.equals(this.slaFilteringCategoryIds, source.slaFilteringCategoryIds) &&
        Objects.equals(this.defaultTaskPriority, source.defaultTaskPriority) &&
        Objects.equals(this.status, source.status) &&
        Objects.equals(this.templateMessages, source.templateMessages) &&
        Objects.equals(this.timeSheetIds, source.timeSheetIds) &&
        Objects.equals(this.transferredTasksBoost, source.transferredTasksBoost) &&
        Objects.equals(this.attachmentsSecurityLevel, source.attachmentsSecurityLevel) &&
        Objects.equals(this.type, source.type) &&
        Objects.equals(this.updatedAt, source.updatedAt) &&
        Objects.equals(this.userThreadDefaultCategoryIds, source.userThreadDefaultCategoryIds) &&
        Objects.equals(this.timeForThreadInclusion, source.timeForThreadInclusion) &&
        Objects.equals(this.timeForThreadInclusionEnabled, source.timeForThreadInclusionEnabled) &&
        Objects.equals(this.emailParser, source.emailParser) &&
        Objects.equals(this.imapSmtpEmail, source.imapSmtpEmail) &&
        Objects.equals(this.imapMailboxesToImport, source.imapMailboxesToImport) &&
        Objects.equals(this.imapMailboxUsedForSentMail, source.imapMailboxUsedForSentMail) &&
        Objects.equals(this.imapAddress, source.imapAddress) &&
        Objects.equals(this.imapPort, source.imapPort) &&
        Objects.equals(this.imapUsername, source.imapUsername) &&
        Objects.equals(this.imapUseSslTls, source.imapUseSslTls) &&
        Objects.equals(this.imapUseStartTls, source.imapUseStartTls) &&
        Objects.equals(this.imapAuthenticationType, source.imapAuthenticationType) &&
        Objects.equals(this.imapSslVerifyMode, source.imapSslVerifyMode) &&
        Objects.equals(this.smtpAddress, source.smtpAddress) &&
        Objects.equals(this.smtpPort, source.smtpPort) &&
        Objects.equals(this.smtpUsername, source.smtpUsername) &&
        Objects.equals(this.smtpUseSslTls, source.smtpUseSslTls) &&
        Objects.equals(this.smtpUseStartTls, source.smtpUseStartTls) &&
        Objects.equals(this.smtpAuthenticationType, source.smtpAuthenticationType) &&
        Objects.equals(this.smtpSslVerifyMode, source.smtpSslVerifyMode) &&
        Objects.equals(this.smtpHeloDomain, source.smtpHeloDomain) &&
        Objects.equals(this.threadingHeuristics, source.threadingHeuristics) &&
        Objects.equals(this.spamAssassinLevel, source.spamAssassinLevel) &&
        Objects.equals(this.whitelistedEmails, source.whitelistedEmails) &&
        Objects.equals(this.ccBlacklist, source.ccBlacklist) &&
        Objects.equals(this.postmarkEnabled, source.postmarkEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, autoDetectContentLanguage, channelId, color, communityId, contentArchiving, contentArchivingPeriod, contentLanguages, createdAt, defaultCategoryIds, defaultContentLanguage, enableAndroid, enableIos, enableWeb, autoResponseTriggers, autoResponseTriggerEnabled, autoResponseTriggerGracePeriods, signatures, fromName, errorMessage, templateMessageNamespace, hiddenFromStats, id, interventionMessagesBoost, liveChat, name, slaExpiredStrategy, slaResponse, slaThreshold, slaFilteringCategoriesStrategy, slaFilteringCategoryIds, defaultTaskPriority, status, templateMessages, timeSheetIds, transferredTasksBoost, attachmentsSecurityLevel, type, updatedAt, userThreadDefaultCategoryIds, timeForThreadInclusion, timeForThreadInclusionEnabled, emailParser, imapSmtpEmail, imapMailboxesToImport, imapMailboxUsedForSentMail, imapAddress, imapPort, imapUsername, imapUseSslTls, imapUseStartTls, imapAuthenticationType, imapSslVerifyMode, smtpAddress, smtpPort, smtpUsername, smtpUseSslTls, smtpUseStartTls, smtpAuthenticationType, smtpSslVerifyMode, smtpHeloDomain, threadingHeuristics, spamAssassinLevel, whitelistedEmails, ccBlacklist, postmarkEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Source {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    autoDetectContentLanguage: ").append(toIndentedString(autoDetectContentLanguage)).append("\n");
    sb.append("    channelId: ").append(toIndentedString(channelId)).append("\n");
    sb.append("    color: ").append(toIndentedString(color)).append("\n");
    sb.append("    communityId: ").append(toIndentedString(communityId)).append("\n");
    sb.append("    contentArchiving: ").append(toIndentedString(contentArchiving)).append("\n");
    sb.append("    contentArchivingPeriod: ").append(toIndentedString(contentArchivingPeriod)).append("\n");
    sb.append("    contentLanguages: ").append(toIndentedString(contentLanguages)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    defaultCategoryIds: ").append(toIndentedString(defaultCategoryIds)).append("\n");
    sb.append("    defaultContentLanguage: ").append(toIndentedString(defaultContentLanguage)).append("\n");
    sb.append("    enableAndroid: ").append(toIndentedString(enableAndroid)).append("\n");
    sb.append("    enableIos: ").append(toIndentedString(enableIos)).append("\n");
    sb.append("    enableWeb: ").append(toIndentedString(enableWeb)).append("\n");
    sb.append("    autoResponseTriggers: ").append(toIndentedString(autoResponseTriggers)).append("\n");
    sb.append("    autoResponseTriggerEnabled: ").append(toIndentedString(autoResponseTriggerEnabled)).append("\n");
    sb.append("    autoResponseTriggerGracePeriods: ").append(toIndentedString(autoResponseTriggerGracePeriods)).append("\n");
    sb.append("    signatures: ").append(toIndentedString(signatures)).append("\n");
    sb.append("    fromName: ").append(toIndentedString(fromName)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    templateMessageNamespace: ").append(toIndentedString(templateMessageNamespace)).append("\n");
    sb.append("    hiddenFromStats: ").append(toIndentedString(hiddenFromStats)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    interventionMessagesBoost: ").append(toIndentedString(interventionMessagesBoost)).append("\n");
    sb.append("    liveChat: ").append(toIndentedString(liveChat)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    slaExpiredStrategy: ").append(toIndentedString(slaExpiredStrategy)).append("\n");
    sb.append("    slaResponse: ").append(toIndentedString(slaResponse)).append("\n");
    sb.append("    slaThreshold: ").append(toIndentedString(slaThreshold)).append("\n");
    sb.append("    slaFilteringCategoriesStrategy: ").append(toIndentedString(slaFilteringCategoriesStrategy)).append("\n");
    sb.append("    slaFilteringCategoryIds: ").append(toIndentedString(slaFilteringCategoryIds)).append("\n");
    sb.append("    defaultTaskPriority: ").append(toIndentedString(defaultTaskPriority)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    templateMessages: ").append(toIndentedString(templateMessages)).append("\n");
    sb.append("    timeSheetIds: ").append(toIndentedString(timeSheetIds)).append("\n");
    sb.append("    transferredTasksBoost: ").append(toIndentedString(transferredTasksBoost)).append("\n");
    sb.append("    attachmentsSecurityLevel: ").append(toIndentedString(attachmentsSecurityLevel)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    userThreadDefaultCategoryIds: ").append(toIndentedString(userThreadDefaultCategoryIds)).append("\n");
    sb.append("    timeForThreadInclusion: ").append(toIndentedString(timeForThreadInclusion)).append("\n");
    sb.append("    timeForThreadInclusionEnabled: ").append(toIndentedString(timeForThreadInclusionEnabled)).append("\n");
    sb.append("    emailParser: ").append(toIndentedString(emailParser)).append("\n");
    sb.append("    imapSmtpEmail: ").append(toIndentedString(imapSmtpEmail)).append("\n");
    sb.append("    imapMailboxesToImport: ").append(toIndentedString(imapMailboxesToImport)).append("\n");
    sb.append("    imapMailboxUsedForSentMail: ").append(toIndentedString(imapMailboxUsedForSentMail)).append("\n");
    sb.append("    imapAddress: ").append(toIndentedString(imapAddress)).append("\n");
    sb.append("    imapPort: ").append(toIndentedString(imapPort)).append("\n");
    sb.append("    imapUsername: ").append(toIndentedString(imapUsername)).append("\n");
    sb.append("    imapUseSslTls: ").append(toIndentedString(imapUseSslTls)).append("\n");
    sb.append("    imapUseStartTls: ").append(toIndentedString(imapUseStartTls)).append("\n");
    sb.append("    imapAuthenticationType: ").append(toIndentedString(imapAuthenticationType)).append("\n");
    sb.append("    imapSslVerifyMode: ").append(toIndentedString(imapSslVerifyMode)).append("\n");
    sb.append("    smtpAddress: ").append(toIndentedString(smtpAddress)).append("\n");
    sb.append("    smtpPort: ").append(toIndentedString(smtpPort)).append("\n");
    sb.append("    smtpUsername: ").append(toIndentedString(smtpUsername)).append("\n");
    sb.append("    smtpUseSslTls: ").append(toIndentedString(smtpUseSslTls)).append("\n");
    sb.append("    smtpUseStartTls: ").append(toIndentedString(smtpUseStartTls)).append("\n");
    sb.append("    smtpAuthenticationType: ").append(toIndentedString(smtpAuthenticationType)).append("\n");
    sb.append("    smtpSslVerifyMode: ").append(toIndentedString(smtpSslVerifyMode)).append("\n");
    sb.append("    smtpHeloDomain: ").append(toIndentedString(smtpHeloDomain)).append("\n");
    sb.append("    threadingHeuristics: ").append(toIndentedString(threadingHeuristics)).append("\n");
    sb.append("    spamAssassinLevel: ").append(toIndentedString(spamAssassinLevel)).append("\n");
    sb.append("    whitelistedEmails: ").append(toIndentedString(whitelistedEmails)).append("\n");
    sb.append("    ccBlacklist: ").append(toIndentedString(ccBlacklist)).append("\n");
    sb.append("    postmarkEnabled: ").append(toIndentedString(postmarkEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

