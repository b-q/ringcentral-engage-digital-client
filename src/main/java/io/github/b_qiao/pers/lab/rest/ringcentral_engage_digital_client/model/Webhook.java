/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.WebhookAccessToken;
import java.util.ArrayList;
import java.util.List;
import java.io.Serializable;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.JSON;


/**
 * Webhook
 */
@JsonPropertyOrder({
  Webhook.JSON_PROPERTY_ACTIVE,
  Webhook.JSON_PROPERTY_API_ACCESS_TOKEN,
  Webhook.JSON_PROPERTY_ID,
  Webhook.JSON_PROPERTY_REGISTERED_EVENTS,
  Webhook.JSON_PROPERTY_STAGING_USE,
  Webhook.JSON_PROPERTY_URL,
  Webhook.JSON_PROPERTY_VERIFY_TOKEN,
  Webhook.JSON_PROPERTY_WEBHOOK_STATUS
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-28T22:45:26.654875700+02:00[Europe/Paris]")
public class Webhook implements Serializable {
  private static final long serialVersionUID = 1L;

  public static final String JSON_PROPERTY_ACTIVE = "active";
  private Boolean active;

  public static final String JSON_PROPERTY_API_ACCESS_TOKEN = "api_access_token";
  private WebhookAccessToken apiAccessToken;

  public static final String JSON_PROPERTY_ID = "id";
  private String id;

  public static final String JSON_PROPERTY_REGISTERED_EVENTS = "registered_events";
  private List<String> registeredEvents = null;

  public static final String JSON_PROPERTY_STAGING_USE = "staging_use";
  private Boolean stagingUse;

  public static final String JSON_PROPERTY_URL = "url";
  private String url;

  public static final String JSON_PROPERTY_VERIFY_TOKEN = "verify_token";
  private String verifyToken;

  public static final String JSON_PROPERTY_WEBHOOK_STATUS = "webhook_status";
  private String webhookStatus;

  public Webhook() { 
  }

  public Webhook active(Boolean active) {
    this.active = active;
    return this;
  }

   /**
   * Get active
   * @return active
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getActive() {
    return active;
  }


  @JsonProperty(JSON_PROPERTY_ACTIVE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setActive(Boolean active) {
    this.active = active;
  }


  public Webhook apiAccessToken(WebhookAccessToken apiAccessToken) {
    this.apiAccessToken = apiAccessToken;
    return this;
  }

   /**
   * Get apiAccessToken
   * @return apiAccessToken
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_API_ACCESS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public WebhookAccessToken getApiAccessToken() {
    return apiAccessToken;
  }


  @JsonProperty(JSON_PROPERTY_API_ACCESS_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setApiAccessToken(WebhookAccessToken apiAccessToken) {
    this.apiAccessToken = apiAccessToken;
  }


  public Webhook id(String id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getId() {
    return id;
  }


  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setId(String id) {
    this.id = id;
  }


  public Webhook registeredEvents(List<String> registeredEvents) {
    this.registeredEvents = registeredEvents;
    return this;
  }

  public Webhook addRegisteredEventsItem(String registeredEventsItem) {
    if (this.registeredEvents == null) {
      this.registeredEvents = new ArrayList<>();
    }
    this.registeredEvents.add(registeredEventsItem);
    return this;
  }

   /**
   * Get registeredEvents
   * @return registeredEvents
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REGISTERED_EVENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<String> getRegisteredEvents() {
    return registeredEvents;
  }


  @JsonProperty(JSON_PROPERTY_REGISTERED_EVENTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setRegisteredEvents(List<String> registeredEvents) {
    this.registeredEvents = registeredEvents;
  }


  public Webhook stagingUse(Boolean stagingUse) {
    this.stagingUse = stagingUse;
    return this;
  }

   /**
   * Get stagingUse
   * @return stagingUse
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_STAGING_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Boolean getStagingUse() {
    return stagingUse;
  }


  @JsonProperty(JSON_PROPERTY_STAGING_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStagingUse(Boolean stagingUse) {
    this.stagingUse = stagingUse;
  }


  public Webhook url(String url) {
    this.url = url;
    return this;
  }

   /**
   * Get url
   * @return url
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getUrl() {
    return url;
  }


  @JsonProperty(JSON_PROPERTY_URL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUrl(String url) {
    this.url = url;
  }


  public Webhook verifyToken(String verifyToken) {
    this.verifyToken = verifyToken;
    return this;
  }

   /**
   * Get verifyToken
   * @return verifyToken
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_VERIFY_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getVerifyToken() {
    return verifyToken;
  }


  @JsonProperty(JSON_PROPERTY_VERIFY_TOKEN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setVerifyToken(String verifyToken) {
    this.verifyToken = verifyToken;
  }


  public Webhook webhookStatus(String webhookStatus) {
    this.webhookStatus = webhookStatus;
    return this;
  }

   /**
   * Get webhookStatus
   * @return webhookStatus
  **/
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WEBHOOK_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getWebhookStatus() {
    return webhookStatus;
  }


  @JsonProperty(JSON_PROPERTY_WEBHOOK_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWebhookStatus(String webhookStatus) {
    this.webhookStatus = webhookStatus;
  }


  /**
   * Return true if this Webhook object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Webhook webhook = (Webhook) o;
    return Objects.equals(this.active, webhook.active) &&
        Objects.equals(this.apiAccessToken, webhook.apiAccessToken) &&
        Objects.equals(this.id, webhook.id) &&
        Objects.equals(this.registeredEvents, webhook.registeredEvents) &&
        Objects.equals(this.stagingUse, webhook.stagingUse) &&
        Objects.equals(this.url, webhook.url) &&
        Objects.equals(this.verifyToken, webhook.verifyToken) &&
        Objects.equals(this.webhookStatus, webhook.webhookStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(active, apiAccessToken, id, registeredEvents, stagingUse, url, verifyToken, webhookStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Webhook {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    apiAccessToken: ").append(toIndentedString(apiAccessToken)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    registeredEvents: ").append(toIndentedString(registeredEvents)).append("\n");
    sb.append("    stagingUse: ").append(toIndentedString(stagingUse)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    verifyToken: ").append(toIndentedString(verifyToken)).append("\n");
    sb.append("    webhookStatus: ").append(toIndentedString(webhookStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

