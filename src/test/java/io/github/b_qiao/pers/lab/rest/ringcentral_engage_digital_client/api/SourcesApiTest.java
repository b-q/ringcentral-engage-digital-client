/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.api;

import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.auth.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.GetAllSourcesResponse;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.Source;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SourcesApi
 */
public class SourcesApiTest {

    private final SourcesApi api = new SourcesApi();

    /**
     * Getting all sources
     *
     * This method renders sources ordered by creation date (ascending).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllSourcesTest() throws ApiException {
        //Integer offset = null;
        //Integer limit = null;
        //GetAllSourcesResponse response = api.getAllSources(offset, limit);
        // TODO: test validations
    }

    /**
     * Getting a source from its id
     *
     * This method renders a source from given id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSourceTest() throws ApiException {
        //String sourceId = null;
        //Source response = api.getSource(sourceId);
        // TODO: test validations
    }

    /**
     * Updating a source
     *
     * This method updates an existing source from given attributes and renders it in case of success.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSourceTest() throws ApiException {
        //String sourceId = null;
        //String name = null;
        //Boolean active = null;
        //String channelId = null;
        //Integer color = null;
        //List<String> timeSheetIds = null;
        //Integer slaResponse = null;
        //Integer slaThreshold = null;
        //String slaFilteringCategoriesStrategy = null;
        //List<String> slaFilteringCategoryIds = null;
        //String slaExpiredStrategy = null;
        //String attachmentsSecurityLevel = null;
        //Integer interventionMessagesBoost = null;
        //Integer transferredTasksBoost = null;
        //Boolean hiddenFromStats = null;
        //List<String> defaultCategoryIds = null;
        //List<String> userThreadDefaultCategoryIds = null;
        //List<Object> signatures = null;
        //List<Object> autoResponseTriggers = null;
        //Boolean autoResponseTriggerEnabledFirstMessageFromUser = null;
        //Boolean autoResponseTriggerEnabledOutOfOfficeHoursMessage = null;
        //Integer autoResponseTriggerGracePeriodsFirstMessageFromUser = null;
        //Integer autoResponseTriggerGracePeriodsOutOfOfficeHoursMessage = null;
        //String defaultContentLanguage = null;
        //Boolean autoDetectContentLanguage = null;
        //List<String> contentLanguages = null;
        //Boolean contentArchiving = null;
        //Integer contentArchivingPeriod = null;
        //String fromName = null;
        //Integer defaultTaskPriority = null;
        //Boolean enableAndroid = null;
        //Boolean enableIos = null;
        //Boolean enableWeb = null;
        //String imapSmtpEmail = null;
        //List<String> imapMailboxesToImport = null;
        //String imapMailboxUsedForSentMail = null;
        //String imapAddress = null;
        //Integer imapPort = null;
        //String imapUsername = null;
        //String imapPassword = null;
        //String imapOauthRefreshToken = null;
        //Boolean imapUseSslTls = null;
        //Boolean imapUseStartTls = null;
        //String imapAuthenticationType = null;
        //String imapSslVerifyMode = null;
        //String smtpAddress = null;
        //Integer smtpPort = null;
        //String smtpUsername = null;
        //String smtpPassword = null;
        //String smtpOauthRefreshToken = null;
        //Boolean smtpUseSslTls = null;
        //Boolean smtpUseStartTls = null;
        //String smtpAuthenticationType = null;
        //String smtpSslVerifyMode = null;
        //String smtpHeloDomain = null;
        //Boolean threadingHeuristics = null;
        //String spamAssassinLevel = null;
        //String whitelistedEmails = null;
        //List<String> ccBlacklist = null;
        //Boolean emailParser = null;
        //Integer timeForThreadInclusion = null;
        //Boolean timeForThreadInclusionEnabled = null;
        //Source response = api.updateSource(sourceId, name, active, channelId, color, timeSheetIds, slaResponse, slaThreshold, slaFilteringCategoriesStrategy, slaFilteringCategoryIds, slaExpiredStrategy, attachmentsSecurityLevel, interventionMessagesBoost, transferredTasksBoost, hiddenFromStats, defaultCategoryIds, userThreadDefaultCategoryIds, signatures, autoResponseTriggers, autoResponseTriggerEnabledFirstMessageFromUser, autoResponseTriggerEnabledOutOfOfficeHoursMessage, autoResponseTriggerGracePeriodsFirstMessageFromUser, autoResponseTriggerGracePeriodsOutOfOfficeHoursMessage, defaultContentLanguage, autoDetectContentLanguage, contentLanguages, contentArchiving, contentArchivingPeriod, fromName, defaultTaskPriority, enableAndroid, enableIos, enableWeb, imapSmtpEmail, imapMailboxesToImport, imapMailboxUsedForSentMail, imapAddress, imapPort, imapUsername, imapPassword, imapOauthRefreshToken, imapUseSslTls, imapUseStartTls, imapAuthenticationType, imapSslVerifyMode, smtpAddress, smtpPort, smtpUsername, smtpPassword, smtpOauthRefreshToken, smtpUseSslTls, smtpUseStartTls, smtpAuthenticationType, smtpSslVerifyMode, smtpHeloDomain, threadingHeuristics, spamAssassinLevel, whitelistedEmails, ccBlacklist, emailParser, timeForThreadInclusion, timeForThreadInclusionEnabled);
        // TODO: test validations
    }

    /**
     * Updating source credentials
     *
     * This method updates credentials for IMAP and SMTP adapters of email sources. In case of success it renders the content source, otherwise, it renders an error (422 HTTP code).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSourceEmailCredentialsTest() throws ApiException {
        //String sourceId = null;
        //String imapUsername = null;
        //String imapPassword = null;
        //String smtpUsername = null;
        //String smtpPassword = null;
        //Source response = api.updateSourceEmailCredentials(sourceId, imapUsername, imapPassword, smtpUsername, smtpPassword);
        // TODO: test validations
    }

}
