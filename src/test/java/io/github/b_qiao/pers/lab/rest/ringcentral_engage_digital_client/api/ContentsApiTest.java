/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.api;

import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.auth.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.Content;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.GetAllContentsResponse;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContentsApi
 */
public class ContentsApiTest {

    private final ContentsApi api = new ContentsApi();

    /**
     * Categorizing a content
     *
     * This method updates the categories of a content. If token’s user does not have “read” on this content’s source a 404 HTTP response will be returned.  Authorization​: no.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categorizeContentTest() throws ApiException {
        //String contentId = null;
        //List<String> categoryIds = null;
        //Content response = api.categorizeContent(contentId, categoryIds);
        // TODO: test validations
    }

    /**
     * Creating content
     *
     * This method allows you to create new content for use in discussions. It can be a reply to another piece of content or be used to initiate discussion. If authorized, the token’s user will be used as the content author. Content will be created in Engage Digital and pushed asynchronously to the source. Replying to a customer content is usually possible (unless the source/conversation is read only). Composing a content on the contrary depend on the source itself: * The source may not support it (and be purely reactive like Instagram, Messenger ...) * Some sources (usually public account) like Twitter or Facebook page allows to publish content without targeting specific individuals. * Some sources (usually non public media) require specific targeting (phone number for SMS, email address for email, customer_id ...) to be able to create a content. This is source specific and detailed under the generic parameters.  Authorization​: only users that can reply or initiate discussion (&#x3D; compose) on given source. it renders also an error if in_reply_to isn’t synchronized or if in_reply_to content is not under an ​open intervention.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createContentTest() throws ApiException {
        //String body = null;
        //String authorId = null;
        //String inReplyToId = null;
        //Boolean _private = null;
        //String sourceId = null;
        //List<String> attachmentIds = null;
        //Boolean autoSubmitted = null;
        //String title = null;
        //List<String> to = null;
        //List<String> cc = null;
        //List<String> bcc = null;
        //String templateName = null;
        //String templateLanguage = null;
        //Content response = api.createContent(body, authorId, inReplyToId, _private, sourceId, attachmentIds, autoSubmitted, title, to, cc, bcc, templateName, templateLanguage);
        // TODO: test validations
    }

    /**
     * Contents
     *
     * This method renders contents ordered by creation date (descending). Only contents in sources where token’s user has “read” permission are returned.  Authorization​: no.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllContentsTest() throws ApiException {
        //String q = null;
        //Integer offset = null;
        //Integer limit = null;
        //GetAllContentsResponse response = api.getAllContents(q, offset, limit);
        // TODO: test validations
    }

    /**
     * Getting a content from its id
     *
     * This method renders a content from given id. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getContentTest() throws ApiException {
        //String contentId = null;
        //Content response = api.getContent(contentId);
        // TODO: test validations
    }

    /**
     * Ignoring a content
     *
     * Ignores a content. If token’s user does not have “read” on content’s source a 404 HTTP response will be returned.  Authorization​: no.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void ignoreContentTest() throws ApiException {
        //String contentId = null;
        //Content response = api.ignoreContent(contentId);
        // TODO: test validations
    }

}
