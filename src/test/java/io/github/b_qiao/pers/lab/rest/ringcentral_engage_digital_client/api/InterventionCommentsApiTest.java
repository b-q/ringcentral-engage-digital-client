/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.api;

import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.auth.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.GetAllInterventionCommentsResponse;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.InterventionComment;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InterventionCommentsApi
 */
public class InterventionCommentsApiTest {

    private final InterventionCommentsApi api = new InterventionCommentsApi();

    /**
     * Creating an intervention comment
     *
     * This method creates a new intervention comment. In case of success it renders the created comment, otherwise, it renders an error (422 HTTP code). It creates comment as token’s user. If token’s user does not have “read” on given intervention’s source a 404 HTTP response will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInterventionCommentTest() throws ApiException {
        //String body = null;
        //String interventionId = null;
        //String userId = null;
        //InterventionComment response = api.createInterventionComment(body, interventionId, userId);
        // TODO: test validations
    }

    /**
     * Deleting an intervention comment
     *
     * This method destroys an intervention comment. It renders comment itself. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.  Authorization​: no.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInterventionCommentTest() throws ApiException {
        //String interventionCommentId = null;
        //InterventionComment response = api.deleteInterventionComment(interventionCommentId);
        // TODO: test validations
    }

    /**
     * Getting all intervention comments
     *
     * This method renders interventions comments ordered by creation date (descending). Only comments in sources where token’s user has “read” permission are returned.  Authorization​: no.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllInterventionCommentsTest() throws ApiException {
        //String interventionId = null;
        //String threadId = null;
        //String userId = null;
        //String identityId = null;
        //Integer offset = null;
        //Integer limit = null;
        //GetAllInterventionCommentsResponse response = api.getAllInterventionComments(interventionId, threadId, userId, identityId, offset, limit);
        // TODO: test validations
    }

    /**
     * Getting an intervention comment from its id
     *
     * This method renders an intervention comment from given id. If token’s user does not have “read” on comment’s source a 404 HTTP response will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInterventionCommentTest() throws ApiException {
        //String interventionCommentId = null;
        //InterventionComment response = api.getInterventionComment(interventionCommentId);
        // TODO: test validations
    }

}
