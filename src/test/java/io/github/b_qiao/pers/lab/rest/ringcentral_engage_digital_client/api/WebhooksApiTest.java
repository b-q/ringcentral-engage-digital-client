/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.api;

import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.auth.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.GetAllWebhooksResponse;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.Webhook;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
public class WebhooksApiTest {

    private final WebhooksApi api = new WebhooksApi();

    /**
     * Creating a webhook
     *
     * This method creates a webhook. In case of success it renders the webhook, otherwise, it renders an error (422 HTTP code).  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebhookTest() throws ApiException {
        //String accessToken = null;
        //String url = null;
        //List<String> registeredEvents = null;
        //Boolean active = null;
        //String name = null;
        //Boolean stagingUse = null;
        //String verifyToken = null;
        //String secret = null;
        //Webhook response = api.createWebhook(accessToken, url, registeredEvents, active, name, stagingUse, verifyToken, secret);
        // TODO: test validations
    }

    /**
     * Deleting a webhook
     *
     * This method destroys an existing webhook. It renders webhook itself. It renders a 404 if id is invalid.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re deleting.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWebhookTest() throws ApiException {
        //String webhookId = null;
        //String accessToken = null;
        //Webhook response = api.deleteWebhook(webhookId, accessToken);
        // TODO: test validations
    }

    /**
     * Getting all webhooks
     *
     * This method renders webhooks ordered by active and staging_use (descending).  Authorization​: users having manage_api_access_tokens permission can see all webhooks / users don’t having the manage_api_access_tokens permission can see only the webhooks belonging to access token created by them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllWebhooksTest() throws ApiException {
        //String accessToken = null;
        //Integer offset = null;
        //Integer limit = null;
        //GetAllWebhooksResponse response = api.getAllWebhooks(accessToken, offset, limit);
        // TODO: test validations
    }

    /**
     * Getting a webhook from its id
     *
     * This method renders a webhook from given id.  Authorization​: users having manage_api_access_tokens permission can see any webhook / users don’t having the &#x60;manage_api_access_tokens&#x60; permission can see only the webhook in case the webhook is associated to an access token created by them.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookTest() throws ApiException {
        //String webhookId = null;
        //String accessToken = null;
        //Webhook response = api.getWebhook(webhookId, accessToken);
        // TODO: test validations
    }

    /**
     * Updating a webhook
     *
     * This method updates an existing webhook from given attributes and renders it in case of success.  Authorization​: All users having the manage_api_access_tokens permission or all users having an api access token belonging to the webhook you’re updating.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebhookTest() throws ApiException {
        //String webhookId = null;
        //String accessToken = null;
        //Boolean active = null;
        //String name = null;
        //Boolean stagingUse = null;
        //String url = null;
        //String verifyToken = null;
        //String secret = null;
        //List<String> registeredEvents = null;
        //Webhook response = api.updateWebhook(webhookId, accessToken, active, name, stagingUse, url, verifyToken, secret, registeredEvents);
        // TODO: test validations
    }

}
