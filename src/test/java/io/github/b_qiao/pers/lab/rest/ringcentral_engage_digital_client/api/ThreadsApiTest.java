/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.api;

import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.auth.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.GetAllThreadsResponse;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.Thread;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ThreadsApi
 */
public class ThreadsApiTest {

    private final ThreadsApi api = new ThreadsApi();

    /**
     * Archiving a thread
     *
     * Archives the contents of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being archived, a 409 HTTP response will be returned.  Authorization​: no.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void archiveThreadTest() throws ApiException {
        //String threadId = null;
        //Thread response = api.archiveThread(threadId);
        // TODO: test validations
    }

    /**
     * Categorizing a thread
     *
     * This method updates the categories of a thread. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  If the thread is already being categorized, a 409 HTTP response will be returned.  Authorization​: no.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void categorizeThreadTest() throws ApiException {
        //String threadId = null;
        //List<String> threadCategoryIds = null;
        //Thread response = api.categorizeThread(threadId, threadCategoryIds);
        // TODO: test validations
    }

    /**
     * Close a thread
     *
     * Thread closure/opening is only available for the following sources: * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to close a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object do not is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be closed or if the user does not have the permission to close a thread.  Authorization​: no.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void closeThreadTest() throws ApiException {
        //String threadId = null;
        //Thread response = api.closeThread(threadId);
        // TODO: test validations
    }

    /**
     * Getting all threads
     *
     * This method renders threads ordered by last content date (descending). Only threads in sources where token’s user has “read” permission are returned.  Authorization​: no.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllThreadsTest() throws ApiException {
        //String q = null;
        //Integer offset = null;
        //Integer limit = null;
        //GetAllThreadsResponse response = api.getAllThreads(q, offset, limit);
        // TODO: test validations
    }

    /**
     * Getting a thread from its id
     *
     * This method renders a thread from given id. If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned.  Authorization​: no.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getThreadTest() throws ApiException {
        //String threadId = null;
        //Thread response = api.getThread(threadId);
        // TODO: test validations
    }

    /**
     * Open a thread
     *
     * Thread closure/opening is only available for the following sources:  * Emails * Answers * Ideas * Facebook Messenger * Google+ * Lithium * Mobile Messaging  Starts a job to open a thread. It returns the thread but as the job is asynchronous, the state of the “close” attribute in the returned object is the one when the job started.  If token’s user does not have “read” on thread’s source a 404 HTTP response will be returned. Returns a 403 if the thread cannot be opened or if the user does not have the permission to open a thread.  Authorization​: no.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void openThreadTest() throws ApiException {
        //String threadId = null;
        //Thread response = api.openThread(threadId);
        // TODO: test validations
    }

}
