/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.api;

import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.auth.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.GetAllTagsResponse;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.Tag;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TagsApi
 */
public class TagsApiTest {

    private final TagsApi api = new TagsApi();

    /**
     * Creating a tag
     *
     * This method creates a new tag. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTagTest() throws ApiException {
        //String name = null;
        //Tag response = api.createTag(name);
        // TODO: test validations
    }

    /**
     * Deleting a tag
     *
     * This method destroys an existing tag. It renders tag itself. It renders a 404 if id is invalid.  Authorization​: only users that are able to destroy tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTagTest() throws ApiException {
        //String tagId = null;
        //Tag response = api.deleteTag(tagId);
        // TODO: test validations
    }

    /**
     * Getting all tags
     *
     * This method renders tags ordered by name (ascending).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllTagsTest() throws ApiException {
        //Integer offset = null;
        //Integer limit = null;
        //GetAllTagsResponse response = api.getAllTags(offset, limit);
        // TODO: test validations
    }

    /**
     * Getting a tag from its id
     *
     * This method renders a tag from given id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTagTest() throws ApiException {
        //String tagId = null;
        //Tag response = api.getTag(tagId);
        // TODO: test validations
    }

    /**
     * Updating a tag
     *
     * This method updates an existing tag from given attributes and renders it in case of success.  Authorization​: only users that are able to update tags.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTagTest() throws ApiException {
        //String tagId = null;
        //String name = null;
        //Tag response = api.updateTag(tagId, name);
        // TODO: test validations
    }

}
