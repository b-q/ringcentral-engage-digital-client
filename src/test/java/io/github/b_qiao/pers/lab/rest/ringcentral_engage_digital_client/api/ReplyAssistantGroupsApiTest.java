/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.api;

import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.auth.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.GetAllReplyAssistantGroupsResponse;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.ReplyAssistantGroup;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReplyAssistantGroupsApi
 */
public class ReplyAssistantGroupsApiTest {

    private final ReplyAssistantGroupsApi api = new ReplyAssistantGroupsApi();

    /**
     * Creating a reply assistant group
     *
     * This method creates an entry group. In case of success it renders the group, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to manage reply assistant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createReplyAssistantGroupTest() throws ApiException {
        //String name = null;
        //List<String> entryIds = null;
        //Boolean autocomplete = null;
        //Integer position = null;
        //ReplyAssistantGroup response = api.createReplyAssistantGroup(name, entryIds, autocomplete, position);
        // TODO: test validations
    }

    /**
     * Deleting a reply assistant group
     *
     * This method destroys an existing group. It renders the group itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to manage reply assistant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteReplyAssistantGroupTest() throws ApiException {
        //String replyAssistantGroupId = null;
        //ReplyAssistantGroup response = api.deleteReplyAssistantGroup(replyAssistantGroupId);
        // TODO: test validations
    }

    /**
     * Getting​ a​ll​ reply assistant groups
     *
     * This method renders all groups ordered by creation date (ascending).  Authorization​: only users that have the right to manage reply assistant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllReplyAssistantGroupsTest() throws ApiException {
        //Integer offset = null;
        //Integer limit = null;
        //GetAllReplyAssistantGroupsResponse response = api.getAllReplyAssistantGroups(offset, limit);
        // TODO: test validations
    }

    /**
     * Getting a reply assistant group from its id
     *
     * This method renders an entry group from given id.  Authorization​: only users that have the right to manage reply assistant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReplyAssistantGroupTest() throws ApiException {
        //String replyAssistantGroupId = null;
        //ReplyAssistantGroup response = api.getReplyAssistantGroup(replyAssistantGroupId);
        // TODO: test validations
    }

    /**
     * Updating a reply assistant group
     *
     * This method updates an existing group from given attributes and renders it in case of success.  Authorization​: only users that have the right to manage reply assistant.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateReplyAssistantGroupTest() throws ApiException {
        //String replyAssistantGroupId = null;
        //String name = null;
        //List<String> entryIds = null;
        //Boolean autocomplete = null;
        //Integer position = null;
        //ReplyAssistantGroup response = api.updateReplyAssistantGroup(replyAssistantGroupId, name, entryIds, autocomplete, position);
        // TODO: test validations
    }

}
