/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.api;

import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.auth.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.Category;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.GetAllCategoriesResponse;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CategoriesApi
 */
public class CategoriesApiTest {

    private final CategoriesApi api = new CategoriesApi();

    /**
     * Creating a category
     *
     * This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ &#x60;​multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids&#x60;​ and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCategoryTest() throws ApiException {
        //String name = null;
        //String parentId = null;
        //Integer color = null;
        //Boolean mandatory = null;
        //Boolean multiple = null;
        //Boolean postQualification = null;
        //Boolean unselectable = null;
        //List<String> sourceIds = null;
        //Category response = api.createCategory(name, parentId, color, mandatory, multiple, postQualification, unselectable, sourceIds);
        // TODO: test validations
    }

    /**
     * Deleting a category
     *
     * This method destroys an existing category. It renders the category itself. It renders a 404 if id is invalid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCategoryTest() throws ApiException {
        //String categoryId = null;
        //String takeOverCategoryId = null;
        //Category response = api.deleteCategory(categoryId, takeOverCategoryId);
        // TODO: test validations
    }

    /**
     * Getting all categories
     *
     * This method renders categories ordered by creation date (ascending).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllCategoriesTest() throws ApiException {
        //String parentId = null;
        //Integer offset = null;
        //Integer limit = null;
        //GetAllCategoriesResponse response = api.getAllCategories(parentId, offset, limit);
        // TODO: test validations
    }

    /**
     * Getting a category from its id
     *
     * This method renders a category from given id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCategoryTest() throws ApiException {
        //String categoryId = null;
        //Category response = api.getCategory(categoryId);
        // TODO: test validations
    }

    /**
     * Updating a category
     *
     * This method creates a new team. In case of success it renders the created tag, otherwise, it renders an error (422 HTTP code).  Note: The fields ​&#x60;mandatory&#x60;,​ ​&#x60;multiple&#x60;,​ ​&#x60;post_qualification​&#x60;, &#x60;s​ource_ids​&#x60; and &#x60;u​nselectable​&#x60; are accounted for only if the Category has no parent.  Authorization​: only users that can manage teams.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCategoryTest() throws ApiException {
        //String categoryId = null;
        //String name = null;
        //String parentId = null;
        //Integer color = null;
        //Boolean mandatory = null;
        //Boolean multiple = null;
        //Boolean postQualification = null;
        //Boolean unselectable = null;
        //List<String> sourceIds = null;
        //Category response = api.updateCategory(categoryId, name, parentId, color, mandatory, multiple, postQualification, unselectable, sourceIds);
        // TODO: test validations
    }

}
