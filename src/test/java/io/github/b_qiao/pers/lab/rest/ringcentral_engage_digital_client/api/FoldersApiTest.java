/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.api;

import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.auth.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.Folder;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.GetAllFoldersResponse;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for FoldersApi
 */
public class FoldersApiTest {

    private final FoldersApi api = new FoldersApi();

    /**
     * Creating a folder
     *
     * This method creates a new folder. In case of success it renders the created folder, otherwise an error (422 HTTP code).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createFolderTest() throws ApiException {
        //String label = null;
        //String parentId = null;
        //Integer position = null;
        //String query = null;
        //Boolean renderThreadsCount = null;
        //List<String> roleRestrictionOnly = null;
        //List<String> teamRestrictionOnly = null;
        //Folder response = api.createFolder(label, parentId, position, query, renderThreadsCount, roleRestrictionOnly, teamRestrictionOnly);
        // TODO: test validations
    }

    /**
     * Deleting a folder
     *
     * This method destroys an existing folder. It renders the folder itself. It renders a 404 if id is invalid.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFolderTest() throws ApiException {
        //String folderId = null;
        //Folder response = api.deleteFolder(folderId);
        // TODO: test validations
    }

    /**
     * Getting all folders
     *
     * This method renders folders.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllFoldersTest() throws ApiException {
        //Integer offset = null;
        //Integer limit = null;
        //GetAllFoldersResponse response = api.getAllFolders(offset, limit);
        // TODO: test validations
    }

    /**
     * Getting a folder from its id
     *
     * This method renders a folder from given id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFolderTest() throws ApiException {
        //String folderId = null;
        //Folder response = api.getFolder(folderId);
        // TODO: test validations
    }

    /**
     * Updating a folder
     *
     * This method updates an existing folder from given attributes and renders it in case of success.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateFolderTest() throws ApiException {
        //String folderId = null;
        //String label = null;
        //String parentId = null;
        //Integer position = null;
        //String query = null;
        //Boolean renderThreadsCount = null;
        //List<String> roleRestrictionOnly = null;
        //List<String> teamRestrictionOnly = null;
        //Folder response = api.updateFolder(folderId, label, parentId, position, query, renderThreadsCount, roleRestrictionOnly, teamRestrictionOnly);
        // TODO: test validations
    }

}
