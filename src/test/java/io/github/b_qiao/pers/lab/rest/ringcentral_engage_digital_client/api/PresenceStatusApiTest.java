/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.api;

import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.auth.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.GetAllPresenceStatusResponse;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.PresenceStatus;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PresenceStatusApi
 */
public class PresenceStatusApiTest {

    private final PresenceStatusApi api = new PresenceStatusApi();

    /**
     * Creating a presence status
     *
     * This method creates a presence status. In case of success it renders the presence status, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that have the right to monitor the task view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPresenceStatusTest() throws ApiException {
        //String name = null;
        //PresenceStatus response = api.createPresenceStatus(name);
        // TODO: test validations
    }

    /**
     * Deleting a presence status
     *
     * This method destroys an existing presence status. It renders presence status itself. It renders a 404 if id is invalid.  Authorization​: only users that have the right to monitor the task view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePresenceStatusTest() throws ApiException {
        //String presenceStatusId = null;
        //PresenceStatus response = api.deletePresenceStatus(presenceStatusId);
        // TODO: test validations
    }

    /**
     * Getting all presence statuses
     *
     * This method renders all presence statuses ordered by name (in alphabetical order).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPresenceStatusTest() throws ApiException {
        //Integer offset = null;
        //Integer limit = null;
        //GetAllPresenceStatusResponse response = api.getAllPresenceStatus(offset, limit);
        // TODO: test validations
    }

    /**
     * Getting a presence status from its id
     *
     * This method renders a presence status from given id.  Authorization​: only users that have the right to monitor the task view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPresenceStatusTest() throws ApiException {
        //String presenceStatusId = null;
        //PresenceStatus response = api.getPresenceStatus(presenceStatusId);
        // TODO: test validations
    }

    /**
     * Updating a presence status
     *
     * This method updates an existing presence status from given attributes and renders it in case of success.  Authorization​: only users that have the right to monitor the task view.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePresenceStatusTest() throws ApiException {
        //String presenceStatusId = null;
        //String name = null;
        //PresenceStatus response = api.updatePresenceStatus(presenceStatusId, name);
        // TODO: test validations
    }

}
