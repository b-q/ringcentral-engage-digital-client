/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.api;

import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.auth.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.GetAllUserSignaturesResponse;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.UserSignature;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserSignaturesApi
 */
public class UserSignaturesApiTest {

    private final UserSignaturesApi api = new UserSignaturesApi();

    /**
     * Creating a user&#39;s signature
     *
     * This method creates a new user’s signature. In case of success it renders the created signature, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can update users. If the user affiliated to the token has the manage_users_of_my_teams permission, the owner of the deleting signature will need to belong to at least one of the teams he’s the leader of.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserSignatureTest() throws ApiException {
        //String userId = null;
        //String body = null;
        //List<String> sourceIds = null;
        //String language = null;
        //String name = null;
        //UserSignature response = api.createUserSignature(userId, body, sourceIds, language, name);
        // TODO: test validations
    }

    /**
     * Deleting a user&#39;s signature
     *
     * This method deletes the given signature. In case of success it renders the deleted signature, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can update users. If the user affiliated to the token has the manage_users_of_my_teams permission, the owner of the deleting signature will need to belong to at least one of the teams he’s the leader of.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserSignatureTest() throws ApiException {
        //String userId = null;
        //String signatureId = null;
        //UserSignature response = api.deleteUserSignature(userId, signatureId);
        // TODO: test validations
    }

    /**
     * Getting all user&#39;s signatures
     *
     * This method renders user’s signatures ordered by creation date (descending).  Authorization​: only users that can view users. If the user affiliated to the token has the manage_users_of_my_teams permission, only the signatures of the users belonging to at least one of the teams he’s the leader of will be available.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUserSignaturesTest() throws ApiException {
        //String userId = null;
        //GetAllUserSignaturesResponse response = api.getAllUserSignatures(userId);
        // TODO: test validations
    }

    /**
     * Getting a user&#39;s signature from its id
     *
     * This method renders a user’s signature from a given id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserSignatureTest() throws ApiException {
        //String userId = null;
        //String signatureId = null;
        //UserSignature response = api.getUserSignature(userId, signatureId);
        // TODO: test validations
    }

    /**
     * Updating a user&#39;s signature
     *
     * This method updates the user’s signature related to the provided id from given attributes. In case of success it renders the updated signature, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can update users. If the user affiliated to the token has the &#x60;manage_users_of_my_teams&#x60; permission, the updated user will need to belong to at least one of the teams he’s the leader of. The teams the user affiliated to the token is the leader of will be the only ones which can be added or removed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserSignatureTest() throws ApiException {
        //String userId = null;
        //String signatureId = null;
        //String body = null;
        //List<String> sourceIds = null;
        //String language = null;
        //String name = null;
        //UserSignature response = api.updateUserSignature(userId, signatureId, body, sourceIds, language, name);
        // TODO: test validations
    }

}
