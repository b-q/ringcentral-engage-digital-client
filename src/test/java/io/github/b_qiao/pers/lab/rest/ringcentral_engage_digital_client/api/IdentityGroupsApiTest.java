/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.api;

import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.auth.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.GetAllIdentityGroupsResponse;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.IdentityGroup;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for IdentityGroupsApi
 */
public class IdentityGroupsApiTest {

    private final IdentityGroupsApi api = new IdentityGroupsApi();

    /**
     * Getting all identity groups
     *
     * This method renders identity groups ordered by creation date (descending). Note that identity_group are created in a lazily only when data are manually added to an identity OR a two identity are merged altogether. That means that some identity DON’T have identity_group, and identity_group do not cover all identities.  Authorization​: no.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllIdentityGroupsTest() throws ApiException {
        //String firstname = null;
        //String lastname = null;
        //String email = null;
        //String uuid = null;
        //String sort = null;
        //Integer offset = null;
        //Integer limit = null;
        //GetAllIdentityGroupsResponse response = api.getAllIdentityGroups(firstname, lastname, email, uuid, sort, offset, limit);
        // TODO: test validations
    }

    /**
     * Getting an identity group from its id
     *
     * This method renders an identity group from given id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getIdentityGroupTest() throws ApiException {
        //String identityGroupId = null;
        //IdentityGroup response = api.getIdentityGroup(identityGroupId);
        // TODO: test validations
    }

    /**
     * Updating an identity group
     *
     * This method updates an identity group from given attributes and renders it in case of success.  Authorization​: no.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateIdentityGroupTest() throws ApiException {
        //String identityGroupId = null;
        //String company = null;
        //String customFieldValuesCustomFieldKey = null;
        //List<String> emails = null;
        //String firstname = null;
        //String gender = null;
        //List<String> homePhones = null;
        //String lastname = null;
        //List<String> mobilePhones = null;
        //String notes = null;
        //List<String> tagIds = null;
        //IdentityGroup response = api.updateIdentityGroup(identityGroupId, company, customFieldValuesCustomFieldKey, emails, firstname, gender, homePhones, lastname, mobilePhones, notes, tagIds);
        // TODO: test validations
    }

}
