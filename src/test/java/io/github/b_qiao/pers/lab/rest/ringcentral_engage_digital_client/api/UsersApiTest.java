/*
 * RingCentral Engage Digital API
 * REST API for RingCentral Engage Digital
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.api;

import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.handler.auth.*;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.GetAllUsersResponse;
import io.github.b_qiao.pers.lab.rest.ringcentral_engage_digital_client.model.User;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UsersApi
 */
public class UsersApiTest {

    private final UsersApi api = new UsersApi();

    /**
     * Creating a user
     *
     * This method creates a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        //String email = null;
        //String firstname = null;
        //String lastname = null;
        //String password = null;
        //String roleId = null;
        //List<String> categoryIds = null;
        //Boolean enabled = null;
        //String externalId = null;
        //String gender = null;
        //List<String> identityIds = null;
        //String locale = null;
        //String nickname = null;
        //List<String> teamIds = null;
        //String timezone = null;
        //List<String> spokenLanguages = null;
        //Boolean noPassword = null;
        //User response = api.createUser(email, firstname, lastname, password, roleId, categoryIds, enabled, externalId, gender, identityIds, locale, nickname, teamIds, timezone, spokenLanguages, noPassword);
        // TODO: test validations
    }

    /**
     * Deleting a user
     *
     * This method deletes the given user. In case of success it renders the deleted user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can update users. The user affiliated to the token must have at least all the permissions of the other user. If the user affiliated to the token has the manage_users_of_my_teams permission, the deleted user will need to belong to at least one of the teams he’s the leader of.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteUserTest() throws ApiException {
        //String userId = null;
        //User response = api.deleteUser(userId);
        // TODO: test validations
    }

    /**
     * Getting all users
     *
     * This method renders users ordered by creation date (descending).  Authorization​: only users that can view users. If the user affiliated to the token has the manage_users_of_my_teams permission, only the users belonging to at least one of the teams he’s the leader of will be returned.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUsersTest() throws ApiException {
        //String email = null;
        //String categoryId = null;
        //String identityId = null;
        //String externalId = null;
        //String roleId = null;
        //String teamId = null;
        //Integer offset = null;
        //Integer limit = null;
        //GetAllUsersResponse response = api.getAllUsers(email, categoryId, identityId, externalId, roleId, teamId, offset, limit);
        // TODO: test validations
    }

    /**
     * Getting a user from its id
     *
     * This method renders a user from given id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserTest() throws ApiException {
        //String userId = null;
        //User response = api.getUser(userId);
        // TODO: test validations
    }

    /**
     * Inviting a user
     *
     * This method invites a new user. In case of success it renders the created user, otherwise, it renders an error (422 HTTP code).  Authorization​: only users that can invite other users. If the user affiliated to the token has the manage_users_of_my_teams permission, the invited user will need to belong to at least one of the teams he’s the leader of. It will not be possible to assign the user to other teams.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void inviteUserTest() throws ApiException {
        //String email = null;
        //String firstname = null;
        //String lastname = null;
        //String roleId = null;
        //List<String> categoryIds = null;
        //Boolean enabled = null;
        //String externalId = null;
        //String gender = null;
        //List<String> identityIds = null;
        //String locale = null;
        //String nickname = null;
        //List<String> teamIds = null;
        //String timezone = null;
        //List<String> spokenLanguages = null;
        //User response = api.inviteUser(email, firstname, lastname, roleId, categoryIds, enabled, externalId, gender, identityIds, locale, nickname, teamIds, timezone, spokenLanguages);
        // TODO: test validations
    }

    /**
     * Updating a user
     *
     * This method updates users from given attributes and renders it in case of success.  Authorization​: only users that can update users. If the user affiliated to the token has the &#x60;manage_users_of_my_teams&#x60; permission, the updated user will need to belong to at least one of the teams he’s the leader of. The teams the user affiliated to the token is the leader of will be the only ones which can be added or removed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserTest() throws ApiException {
        //String userId = null;
        //List<String> categoryIds = null;
        //String email = null;
        //Boolean enabled = null;
        //String externalId = null;
        //String firstname = null;
        //String gender = null;
        //List<String> identityIds = null;
        //String lastname = null;
        //String locale = null;
        //String nickname = null;
        //String password = null;
        //String roleId = null;
        //List<String> teamIds = null;
        //String timezone = null;
        //List<String> spokenLanguages = null;
        //Boolean noPassword = null;
        //User response = api.updateUser(userId, categoryIds, email, enabled, externalId, firstname, gender, identityIds, lastname, locale, nickname, password, roleId, teamIds, timezone, spokenLanguages, noPassword);
        // TODO: test validations
    }

}
